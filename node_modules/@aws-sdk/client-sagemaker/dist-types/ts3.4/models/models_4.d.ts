import {
  ActionStatus,
  AdditionalInferenceSpecificationDefinition,
  AlgorithmSpecification,
  AppNetworkAccessType,
  AppSecurityGroupManagement,
  AppSpecification,
  AppType,
  AutoMLJobStepMetadata,
  BatchDataCaptureConfig,
  BatchStrategy,
  BatchTransformInput,
  BooleanOperator,
  CacheHitResult,
  CallbackStepMetadata,
  Channel,
  CheckpointConfig,
  ClarifyCheckStepMetadata,
  ClusterInstanceGroupSpecification,
  CodeEditorAppImageConfig,
  ConditionStepMetadata,
  ContainerDefinition,
  InferenceSpecification,
  JupyterLabAppImageConfig,
  KernelGatewayImageConfig,
  MetadataProperties,
  ModelApprovalStatus,
  ModelPackageStatus,
  OutputDataConfig,
  OutputParameter,
  ResourceConfig,
  StoppingCondition,
  Tag,
  TransformInput,
  TransformOutput,
  TransformResources,
  UserContext,
  VpcConfig,
} from "./models_0";
import {
  _InstanceType,
  DefaultSpaceSettings,
  DeploymentConfig,
  DriftCheckBaselines,
  EdgeOutputConfig,
  ExperimentConfig,
  FeatureDefinition,
  InferenceComponentRuntimeConfig,
  InferenceComponentSpecification,
  InferenceExecutionConfig,
  InferenceExperimentDataStorageConfig,
  InferenceExperimentSchedule,
  InstanceMetadataServiceConfiguration,
  JobType,
  ModelCardSecurityConfig,
  ModelCardStatus,
  ModelMetrics,
  ModelPackageModelCard,
  ModelPackageSecurityConfig,
  ModelPackageValidationSpecification,
  ModelVariantConfig,
  MonitoringScheduleConfig,
  MonitoringType,
  NetworkConfig,
  NotebookInstanceAcceleratorType,
  NotebookInstanceLifecycleHook,
  OptimizationJobDeploymentInstanceType,
  ParallelismConfiguration,
  PipelineDefinitionS3Location,
  Processor,
  RetryStrategy,
  RootAccess,
  ShadowModeConfig,
  SkipModelValidation,
  SourceAlgorithmSpecification,
  ThroughputMode,
  TrackingServerSize,
  TtlDuration,
  UiTemplate,
  UserSettings,
  VendorGuidance,
} from "./models_1";
import {
  CrossAccountFilterOption,
  DataProcessing,
  DebugHookConfig,
  DebugRuleConfiguration,
  DebugRuleEvaluationStatus,
  DeploymentRecommendation,
  EndpointStatus,
  FeatureParameter,
  HyperParameterTrainingJobSummary,
  MemberDefinition,
  ModelArtifacts,
  ModelClientConfig,
  NotificationConfiguration,
  OidcConfig,
  ProcessingInput,
  ProcessingOutputConfig,
  ProcessingResources,
  ProcessingStoppingCondition,
  ProfilerConfig,
  ProfilerRuleConfiguration,
  ProvisioningParameter,
  ServiceCatalogProvisioningDetails,
  SharingType,
  SourceIpConfig,
  SpaceSettings,
  SpaceStorageSettings,
  StudioLifecycleConfigAppType,
  TensorBoardOutputConfig,
  TrainingJobStatus,
  TrialComponentArtifact,
  TrialComponentParameterValue,
  TrialComponentStatus,
  WorkerAccessConfiguration,
  WorkforceVpcConfigRequest,
} from "./models_2";
import {
  DesiredWeightAndCapacity,
  Device,
  DeviceDeploymentSummary,
  Direction,
  DomainSettingsForUpdate,
  Edge,
  EMRStepMetadata,
  Endpoint,
  EndpointConfigStepMetadata,
  EndpointStepMetadata,
  ExecutionStatus,
  Experiment,
  FailStepMetadata,
  FeatureGroup,
  FeatureMetadata,
  Filter,
  GitConfigForUpdate,
  HyperParameterTuningJobSearchEntity,
  InferenceExperimentStopDesiredState,
  LambdaStepMetadata,
  LineageType,
  MetricData,
  ModelPackageGroupStatus,
  ModelPackageStatusDetails,
  MonitoringExecutionSummary,
  MonitoringJobDefinitionSortKey,
  MonitoringJobDefinitionSummary,
  NotebookInstanceStatus,
  OptimizationJobStatus,
  OrderKey,
  PipelineExecutionStatus,
  PipelineExperimentConfig,
  PipelineStatus,
  ProcessingJobStatus,
  ProjectStatus,
  ResourceType,
  ScheduleStatus,
  SecondaryStatus,
  SecondaryStatusTransition,
  SelectiveExecutionConfig,
  ServiceCatalogProvisionedProductDetails,
  SortBy,
  SortOrder,
  SpaceStatus,
  SubscribedWorkteam,
  TransformJobStatus,
  TrialComponentMetricSummary,
  TrialComponentSource,
  TrialSource,
  UserProfileStatus,
  WarmPoolResourceStatus,
  WarmPoolStatus,
  Workforce,
  Workteam,
} from "./models_3";
export interface ModelCardVersionSummary {
  ModelCardName: string | undefined;
  ModelCardArn: string | undefined;
  ModelCardStatus: ModelCardStatus | undefined;
  ModelCardVersion: number | undefined;
  CreationTime: Date | undefined;
  LastModifiedTime?: Date;
}
export interface ListModelCardVersionsResponse {
  ModelCardVersionSummaryList: ModelCardVersionSummary[] | undefined;
  NextToken?: string;
}
export interface ListModelExplainabilityJobDefinitionsRequest {
  EndpointName?: string;
  SortBy?: MonitoringJobDefinitionSortKey;
  SortOrder?: SortOrder;
  NextToken?: string;
  MaxResults?: number;
  NameContains?: string;
  CreationTimeBefore?: Date;
  CreationTimeAfter?: Date;
}
export interface ListModelExplainabilityJobDefinitionsResponse {
  JobDefinitionSummaries: MonitoringJobDefinitionSummary[] | undefined;
  NextToken?: string;
}
export declare const ModelMetadataFilterType: {
  readonly DOMAIN: "Domain";
  readonly FRAMEWORK: "Framework";
  readonly FRAMEWORKVERSION: "FrameworkVersion";
  readonly TASK: "Task";
};
export type ModelMetadataFilterType =
  (typeof ModelMetadataFilterType)[keyof typeof ModelMetadataFilterType];
export interface ModelMetadataFilter {
  Name: ModelMetadataFilterType | undefined;
  Value: string | undefined;
}
export interface ModelMetadataSearchExpression {
  Filters?: ModelMetadataFilter[];
}
export interface ListModelMetadataRequest {
  SearchExpression?: ModelMetadataSearchExpression;
  NextToken?: string;
  MaxResults?: number;
}
export interface ModelMetadataSummary {
  Domain: string | undefined;
  Framework: string | undefined;
  Task: string | undefined;
  Model: string | undefined;
  FrameworkVersion: string | undefined;
}
export interface ListModelMetadataResponse {
  ModelMetadataSummaries: ModelMetadataSummary[] | undefined;
  NextToken?: string;
}
export declare const ModelPackageGroupSortBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly NAME: "Name";
};
export type ModelPackageGroupSortBy =
  (typeof ModelPackageGroupSortBy)[keyof typeof ModelPackageGroupSortBy];
export interface ListModelPackageGroupsInput {
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  MaxResults?: number;
  NameContains?: string;
  NextToken?: string;
  SortBy?: ModelPackageGroupSortBy;
  SortOrder?: SortOrder;
  CrossAccountFilterOption?: CrossAccountFilterOption;
}
export interface ModelPackageGroupSummary {
  ModelPackageGroupName: string | undefined;
  ModelPackageGroupArn: string | undefined;
  ModelPackageGroupDescription?: string;
  CreationTime: Date | undefined;
  ModelPackageGroupStatus: ModelPackageGroupStatus | undefined;
}
export interface ListModelPackageGroupsOutput {
  ModelPackageGroupSummaryList: ModelPackageGroupSummary[] | undefined;
  NextToken?: string;
}
export declare const ModelPackageType: {
  readonly BOTH: "Both";
  readonly UNVERSIONED: "Unversioned";
  readonly VERSIONED: "Versioned";
};
export type ModelPackageType =
  (typeof ModelPackageType)[keyof typeof ModelPackageType];
export declare const ModelPackageSortBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly NAME: "Name";
};
export type ModelPackageSortBy =
  (typeof ModelPackageSortBy)[keyof typeof ModelPackageSortBy];
export interface ListModelPackagesInput {
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  MaxResults?: number;
  NameContains?: string;
  ModelApprovalStatus?: ModelApprovalStatus;
  ModelPackageGroupName?: string;
  ModelPackageType?: ModelPackageType;
  NextToken?: string;
  SortBy?: ModelPackageSortBy;
  SortOrder?: SortOrder;
}
export interface ModelPackageSummary {
  ModelPackageName?: string;
  ModelPackageGroupName?: string;
  ModelPackageVersion?: number;
  ModelPackageArn: string | undefined;
  ModelPackageDescription?: string;
  CreationTime: Date | undefined;
  ModelPackageStatus: ModelPackageStatus | undefined;
  ModelApprovalStatus?: ModelApprovalStatus;
}
export interface ListModelPackagesOutput {
  ModelPackageSummaryList: ModelPackageSummary[] | undefined;
  NextToken?: string;
}
export interface ListModelQualityJobDefinitionsRequest {
  EndpointName?: string;
  SortBy?: MonitoringJobDefinitionSortKey;
  SortOrder?: SortOrder;
  NextToken?: string;
  MaxResults?: number;
  NameContains?: string;
  CreationTimeBefore?: Date;
  CreationTimeAfter?: Date;
}
export interface ListModelQualityJobDefinitionsResponse {
  JobDefinitionSummaries: MonitoringJobDefinitionSummary[] | undefined;
  NextToken?: string;
}
export declare const ModelSortKey: {
  readonly CreationTime: "CreationTime";
  readonly Name: "Name";
};
export type ModelSortKey = (typeof ModelSortKey)[keyof typeof ModelSortKey];
export interface ListModelsInput {
  SortBy?: ModelSortKey;
  SortOrder?: OrderKey;
  NextToken?: string;
  MaxResults?: number;
  NameContains?: string;
  CreationTimeBefore?: Date;
  CreationTimeAfter?: Date;
}
export interface ModelSummary {
  ModelName: string | undefined;
  ModelArn: string | undefined;
  CreationTime: Date | undefined;
}
export interface ListModelsOutput {
  Models: ModelSummary[] | undefined;
  NextToken?: string;
}
export declare const MonitoringAlertHistorySortKey: {
  readonly CreationTime: "CreationTime";
  readonly Status: "Status";
};
export type MonitoringAlertHistorySortKey =
  (typeof MonitoringAlertHistorySortKey)[keyof typeof MonitoringAlertHistorySortKey];
export declare const MonitoringAlertStatus: {
  readonly IN_ALERT: "InAlert";
  readonly OK: "OK";
};
export type MonitoringAlertStatus =
  (typeof MonitoringAlertStatus)[keyof typeof MonitoringAlertStatus];
export interface ListMonitoringAlertHistoryRequest {
  MonitoringScheduleName?: string;
  MonitoringAlertName?: string;
  SortBy?: MonitoringAlertHistorySortKey;
  SortOrder?: SortOrder;
  NextToken?: string;
  MaxResults?: number;
  CreationTimeBefore?: Date;
  CreationTimeAfter?: Date;
  StatusEquals?: MonitoringAlertStatus;
}
export interface MonitoringAlertHistorySummary {
  MonitoringScheduleName: string | undefined;
  MonitoringAlertName: string | undefined;
  CreationTime: Date | undefined;
  AlertStatus: MonitoringAlertStatus | undefined;
}
export interface ListMonitoringAlertHistoryResponse {
  MonitoringAlertHistory?: MonitoringAlertHistorySummary[];
  NextToken?: string;
}
export interface ListMonitoringAlertsRequest {
  MonitoringScheduleName: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface ModelDashboardIndicatorAction {
  Enabled?: boolean;
}
export interface MonitoringAlertActions {
  ModelDashboardIndicator?: ModelDashboardIndicatorAction;
}
export interface MonitoringAlertSummary {
  MonitoringAlertName: string | undefined;
  CreationTime: Date | undefined;
  LastModifiedTime: Date | undefined;
  AlertStatus: MonitoringAlertStatus | undefined;
  DatapointsToAlert: number | undefined;
  EvaluationPeriod: number | undefined;
  Actions: MonitoringAlertActions | undefined;
}
export interface ListMonitoringAlertsResponse {
  MonitoringAlertSummaries?: MonitoringAlertSummary[];
  NextToken?: string;
}
export declare const MonitoringExecutionSortKey: {
  readonly CREATION_TIME: "CreationTime";
  readonly SCHEDULED_TIME: "ScheduledTime";
  readonly STATUS: "Status";
};
export type MonitoringExecutionSortKey =
  (typeof MonitoringExecutionSortKey)[keyof typeof MonitoringExecutionSortKey];
export interface ListMonitoringExecutionsRequest {
  MonitoringScheduleName?: string;
  EndpointName?: string;
  SortBy?: MonitoringExecutionSortKey;
  SortOrder?: SortOrder;
  NextToken?: string;
  MaxResults?: number;
  ScheduledTimeBefore?: Date;
  ScheduledTimeAfter?: Date;
  CreationTimeBefore?: Date;
  CreationTimeAfter?: Date;
  LastModifiedTimeBefore?: Date;
  LastModifiedTimeAfter?: Date;
  StatusEquals?: ExecutionStatus;
  MonitoringJobDefinitionName?: string;
  MonitoringTypeEquals?: MonitoringType;
}
export interface ListMonitoringExecutionsResponse {
  MonitoringExecutionSummaries: MonitoringExecutionSummary[] | undefined;
  NextToken?: string;
}
export declare const MonitoringScheduleSortKey: {
  readonly CREATION_TIME: "CreationTime";
  readonly NAME: "Name";
  readonly STATUS: "Status";
};
export type MonitoringScheduleSortKey =
  (typeof MonitoringScheduleSortKey)[keyof typeof MonitoringScheduleSortKey];
export interface ListMonitoringSchedulesRequest {
  EndpointName?: string;
  SortBy?: MonitoringScheduleSortKey;
  SortOrder?: SortOrder;
  NextToken?: string;
  MaxResults?: number;
  NameContains?: string;
  CreationTimeBefore?: Date;
  CreationTimeAfter?: Date;
  LastModifiedTimeBefore?: Date;
  LastModifiedTimeAfter?: Date;
  StatusEquals?: ScheduleStatus;
  MonitoringJobDefinitionName?: string;
  MonitoringTypeEquals?: MonitoringType;
}
export interface MonitoringScheduleSummary {
  MonitoringScheduleName: string | undefined;
  MonitoringScheduleArn: string | undefined;
  CreationTime: Date | undefined;
  LastModifiedTime: Date | undefined;
  MonitoringScheduleStatus: ScheduleStatus | undefined;
  EndpointName?: string;
  MonitoringJobDefinitionName?: string;
  MonitoringType?: MonitoringType;
}
export interface ListMonitoringSchedulesResponse {
  MonitoringScheduleSummaries: MonitoringScheduleSummary[] | undefined;
  NextToken?: string;
}
export declare const NotebookInstanceLifecycleConfigSortKey: {
  readonly CREATION_TIME: "CreationTime";
  readonly LAST_MODIFIED_TIME: "LastModifiedTime";
  readonly NAME: "Name";
};
export type NotebookInstanceLifecycleConfigSortKey =
  (typeof NotebookInstanceLifecycleConfigSortKey)[keyof typeof NotebookInstanceLifecycleConfigSortKey];
export declare const NotebookInstanceLifecycleConfigSortOrder: {
  readonly ASCENDING: "Ascending";
  readonly DESCENDING: "Descending";
};
export type NotebookInstanceLifecycleConfigSortOrder =
  (typeof NotebookInstanceLifecycleConfigSortOrder)[keyof typeof NotebookInstanceLifecycleConfigSortOrder];
export interface ListNotebookInstanceLifecycleConfigsInput {
  NextToken?: string;
  MaxResults?: number;
  SortBy?: NotebookInstanceLifecycleConfigSortKey;
  SortOrder?: NotebookInstanceLifecycleConfigSortOrder;
  NameContains?: string;
  CreationTimeBefore?: Date;
  CreationTimeAfter?: Date;
  LastModifiedTimeBefore?: Date;
  LastModifiedTimeAfter?: Date;
}
export interface NotebookInstanceLifecycleConfigSummary {
  NotebookInstanceLifecycleConfigName: string | undefined;
  NotebookInstanceLifecycleConfigArn: string | undefined;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export interface ListNotebookInstanceLifecycleConfigsOutput {
  NextToken?: string;
  NotebookInstanceLifecycleConfigs?: NotebookInstanceLifecycleConfigSummary[];
}
export declare const NotebookInstanceSortKey: {
  readonly CREATION_TIME: "CreationTime";
  readonly NAME: "Name";
  readonly STATUS: "Status";
};
export type NotebookInstanceSortKey =
  (typeof NotebookInstanceSortKey)[keyof typeof NotebookInstanceSortKey];
export declare const NotebookInstanceSortOrder: {
  readonly ASCENDING: "Ascending";
  readonly DESCENDING: "Descending";
};
export type NotebookInstanceSortOrder =
  (typeof NotebookInstanceSortOrder)[keyof typeof NotebookInstanceSortOrder];
export interface ListNotebookInstancesInput {
  NextToken?: string;
  MaxResults?: number;
  SortBy?: NotebookInstanceSortKey;
  SortOrder?: NotebookInstanceSortOrder;
  NameContains?: string;
  CreationTimeBefore?: Date;
  CreationTimeAfter?: Date;
  LastModifiedTimeBefore?: Date;
  LastModifiedTimeAfter?: Date;
  StatusEquals?: NotebookInstanceStatus;
  NotebookInstanceLifecycleConfigNameContains?: string;
  DefaultCodeRepositoryContains?: string;
  AdditionalCodeRepositoryEquals?: string;
}
export interface NotebookInstanceSummary {
  NotebookInstanceName: string | undefined;
  NotebookInstanceArn: string | undefined;
  NotebookInstanceStatus?: NotebookInstanceStatus;
  Url?: string;
  InstanceType?: _InstanceType;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  NotebookInstanceLifecycleConfigName?: string;
  DefaultCodeRepository?: string;
  AdditionalCodeRepositories?: string[];
}
export interface ListNotebookInstancesOutput {
  NextToken?: string;
  NotebookInstances?: NotebookInstanceSummary[];
}
export declare const ListOptimizationJobsSortBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly NAME: "Name";
  readonly STATUS: "Status";
};
export type ListOptimizationJobsSortBy =
  (typeof ListOptimizationJobsSortBy)[keyof typeof ListOptimizationJobsSortBy];
export interface ListOptimizationJobsRequest {
  NextToken?: string;
  MaxResults?: number;
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  LastModifiedTimeAfter?: Date;
  LastModifiedTimeBefore?: Date;
  OptimizationContains?: string;
  NameContains?: string;
  StatusEquals?: OptimizationJobStatus;
  SortBy?: ListOptimizationJobsSortBy;
  SortOrder?: SortOrder;
}
export interface OptimizationJobSummary {
  OptimizationJobName: string | undefined;
  OptimizationJobArn: string | undefined;
  CreationTime: Date | undefined;
  OptimizationJobStatus: OptimizationJobStatus | undefined;
  OptimizationStartTime?: Date;
  OptimizationEndTime?: Date;
  LastModifiedTime?: Date;
  DeploymentInstanceType: OptimizationJobDeploymentInstanceType | undefined;
  OptimizationTypes: string[] | undefined;
}
export interface ListOptimizationJobsResponse {
  OptimizationJobSummaries: OptimizationJobSummary[] | undefined;
  NextToken?: string;
}
export declare const SortPipelineExecutionsBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly PIPELINE_EXECUTION_ARN: "PipelineExecutionArn";
};
export type SortPipelineExecutionsBy =
  (typeof SortPipelineExecutionsBy)[keyof typeof SortPipelineExecutionsBy];
export interface ListPipelineExecutionsRequest {
  PipelineName: string | undefined;
  CreatedAfter?: Date;
  CreatedBefore?: Date;
  SortBy?: SortPipelineExecutionsBy;
  SortOrder?: SortOrder;
  NextToken?: string;
  MaxResults?: number;
}
export interface PipelineExecutionSummary {
  PipelineExecutionArn?: string;
  StartTime?: Date;
  PipelineExecutionStatus?: PipelineExecutionStatus;
  PipelineExecutionDescription?: string;
  PipelineExecutionDisplayName?: string;
  PipelineExecutionFailureReason?: string;
}
export interface ListPipelineExecutionsResponse {
  PipelineExecutionSummaries?: PipelineExecutionSummary[];
  NextToken?: string;
}
export interface ListPipelineExecutionStepsRequest {
  PipelineExecutionArn?: string;
  NextToken?: string;
  MaxResults?: number;
  SortOrder?: SortOrder;
}
export interface ModelStepMetadata {
  Arn?: string;
}
export interface ProcessingJobStepMetadata {
  Arn?: string;
}
export interface QualityCheckStepMetadata {
  CheckType?: string;
  BaselineUsedForDriftCheckStatistics?: string;
  BaselineUsedForDriftCheckConstraints?: string;
  CalculatedBaselineStatistics?: string;
  CalculatedBaselineConstraints?: string;
  ModelPackageGroupName?: string;
  ViolationReport?: string;
  CheckJobArn?: string;
  SkipCheck?: boolean;
  RegisterNewBaseline?: boolean;
}
export interface RegisterModelStepMetadata {
  Arn?: string;
}
export interface TrainingJobStepMetadata {
  Arn?: string;
}
export interface TransformJobStepMetadata {
  Arn?: string;
}
export interface TuningJobStepMetaData {
  Arn?: string;
}
export interface PipelineExecutionStepMetadata {
  TrainingJob?: TrainingJobStepMetadata;
  ProcessingJob?: ProcessingJobStepMetadata;
  TransformJob?: TransformJobStepMetadata;
  TuningJob?: TuningJobStepMetaData;
  Model?: ModelStepMetadata;
  RegisterModel?: RegisterModelStepMetadata;
  Condition?: ConditionStepMetadata;
  Callback?: CallbackStepMetadata;
  Lambda?: LambdaStepMetadata;
  EMR?: EMRStepMetadata;
  QualityCheck?: QualityCheckStepMetadata;
  ClarifyCheck?: ClarifyCheckStepMetadata;
  Fail?: FailStepMetadata;
  AutoMLJob?: AutoMLJobStepMetadata;
  Endpoint?: EndpointStepMetadata;
  EndpointConfig?: EndpointConfigStepMetadata;
}
export interface SelectiveExecutionResult {
  SourcePipelineExecutionArn?: string;
}
export declare const StepStatus: {
  readonly EXECUTING: "Executing";
  readonly FAILED: "Failed";
  readonly STARTING: "Starting";
  readonly STOPPED: "Stopped";
  readonly STOPPING: "Stopping";
  readonly SUCCEEDED: "Succeeded";
};
export type StepStatus = (typeof StepStatus)[keyof typeof StepStatus];
export interface PipelineExecutionStep {
  StepName?: string;
  StepDisplayName?: string;
  StepDescription?: string;
  StartTime?: Date;
  EndTime?: Date;
  StepStatus?: StepStatus;
  CacheHitResult?: CacheHitResult;
  FailureReason?: string;
  Metadata?: PipelineExecutionStepMetadata;
  AttemptCount?: number;
  SelectiveExecutionResult?: SelectiveExecutionResult;
}
export interface ListPipelineExecutionStepsResponse {
  PipelineExecutionSteps?: PipelineExecutionStep[];
  NextToken?: string;
}
export interface ListPipelineParametersForExecutionRequest {
  PipelineExecutionArn: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface Parameter {
  Name: string | undefined;
  Value: string | undefined;
}
export interface ListPipelineParametersForExecutionResponse {
  PipelineParameters?: Parameter[];
  NextToken?: string;
}
export declare const SortPipelinesBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly NAME: "Name";
};
export type SortPipelinesBy =
  (typeof SortPipelinesBy)[keyof typeof SortPipelinesBy];
export interface ListPipelinesRequest {
  PipelineNamePrefix?: string;
  CreatedAfter?: Date;
  CreatedBefore?: Date;
  SortBy?: SortPipelinesBy;
  SortOrder?: SortOrder;
  NextToken?: string;
  MaxResults?: number;
}
export interface PipelineSummary {
  PipelineArn?: string;
  PipelineName?: string;
  PipelineDisplayName?: string;
  PipelineDescription?: string;
  RoleArn?: string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  LastExecutionTime?: Date;
}
export interface ListPipelinesResponse {
  PipelineSummaries?: PipelineSummary[];
  NextToken?: string;
}
export interface ListProcessingJobsRequest {
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  LastModifiedTimeAfter?: Date;
  LastModifiedTimeBefore?: Date;
  NameContains?: string;
  StatusEquals?: ProcessingJobStatus;
  SortBy?: SortBy;
  SortOrder?: SortOrder;
  NextToken?: string;
  MaxResults?: number;
}
export interface ProcessingJobSummary {
  ProcessingJobName: string | undefined;
  ProcessingJobArn: string | undefined;
  CreationTime: Date | undefined;
  ProcessingEndTime?: Date;
  LastModifiedTime?: Date;
  ProcessingJobStatus: ProcessingJobStatus | undefined;
  FailureReason?: string;
  ExitMessage?: string;
}
export interface ListProcessingJobsResponse {
  ProcessingJobSummaries: ProcessingJobSummary[] | undefined;
  NextToken?: string;
}
export declare const ProjectSortBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly NAME: "Name";
};
export type ProjectSortBy = (typeof ProjectSortBy)[keyof typeof ProjectSortBy];
export declare const ProjectSortOrder: {
  readonly ASCENDING: "Ascending";
  readonly DESCENDING: "Descending";
};
export type ProjectSortOrder =
  (typeof ProjectSortOrder)[keyof typeof ProjectSortOrder];
export interface ListProjectsInput {
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  MaxResults?: number;
  NameContains?: string;
  NextToken?: string;
  SortBy?: ProjectSortBy;
  SortOrder?: ProjectSortOrder;
}
export interface ProjectSummary {
  ProjectName: string | undefined;
  ProjectDescription?: string;
  ProjectArn: string | undefined;
  ProjectId: string | undefined;
  CreationTime: Date | undefined;
  ProjectStatus: ProjectStatus | undefined;
}
export interface ListProjectsOutput {
  ProjectSummaryList: ProjectSummary[] | undefined;
  NextToken?: string;
}
export declare const ResourceCatalogSortBy: {
  readonly CREATION_TIME: "CreationTime";
};
export type ResourceCatalogSortBy =
  (typeof ResourceCatalogSortBy)[keyof typeof ResourceCatalogSortBy];
export declare const ResourceCatalogSortOrder: {
  readonly ASCENDING: "Ascending";
  readonly DESCENDING: "Descending";
};
export type ResourceCatalogSortOrder =
  (typeof ResourceCatalogSortOrder)[keyof typeof ResourceCatalogSortOrder];
export interface ListResourceCatalogsRequest {
  NameContains?: string;
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  SortOrder?: ResourceCatalogSortOrder;
  SortBy?: ResourceCatalogSortBy;
  MaxResults?: number;
  NextToken?: string;
}
export interface ResourceCatalog {
  ResourceCatalogArn: string | undefined;
  ResourceCatalogName: string | undefined;
  Description: string | undefined;
  CreationTime: Date | undefined;
}
export interface ListResourceCatalogsResponse {
  ResourceCatalogs?: ResourceCatalog[];
  NextToken?: string;
}
export declare const SpaceSortKey: {
  readonly CreationTime: "CreationTime";
  readonly LastModifiedTime: "LastModifiedTime";
};
export type SpaceSortKey = (typeof SpaceSortKey)[keyof typeof SpaceSortKey];
export interface ListSpacesRequest {
  NextToken?: string;
  MaxResults?: number;
  SortOrder?: SortOrder;
  SortBy?: SpaceSortKey;
  DomainIdEquals?: string;
  SpaceNameContains?: string;
}
export interface OwnershipSettingsSummary {
  OwnerUserProfileName?: string;
}
export interface SpaceSettingsSummary {
  AppType?: AppType;
  SpaceStorageSettings?: SpaceStorageSettings;
}
export interface SpaceSharingSettingsSummary {
  SharingType?: SharingType;
}
export interface SpaceDetails {
  DomainId?: string;
  SpaceName?: string;
  Status?: SpaceStatus;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  SpaceSettingsSummary?: SpaceSettingsSummary;
  SpaceSharingSettingsSummary?: SpaceSharingSettingsSummary;
  OwnershipSettingsSummary?: OwnershipSettingsSummary;
  SpaceDisplayName?: string;
}
export interface ListSpacesResponse {
  Spaces?: SpaceDetails[];
  NextToken?: string;
}
export interface ListStageDevicesRequest {
  NextToken?: string;
  MaxResults?: number;
  EdgeDeploymentPlanName: string | undefined;
  ExcludeDevicesDeployedInOtherStage?: boolean;
  StageName: string | undefined;
}
export interface ListStageDevicesResponse {
  DeviceDeploymentSummaries: DeviceDeploymentSummary[] | undefined;
  NextToken?: string;
}
export declare const StudioLifecycleConfigSortKey: {
  readonly CreationTime: "CreationTime";
  readonly LastModifiedTime: "LastModifiedTime";
  readonly Name: "Name";
};
export type StudioLifecycleConfigSortKey =
  (typeof StudioLifecycleConfigSortKey)[keyof typeof StudioLifecycleConfigSortKey];
export interface ListStudioLifecycleConfigsRequest {
  MaxResults?: number;
  NextToken?: string;
  NameContains?: string;
  AppTypeEquals?: StudioLifecycleConfigAppType;
  CreationTimeBefore?: Date;
  CreationTimeAfter?: Date;
  ModifiedTimeBefore?: Date;
  ModifiedTimeAfter?: Date;
  SortBy?: StudioLifecycleConfigSortKey;
  SortOrder?: SortOrder;
}
export interface StudioLifecycleConfigDetails {
  StudioLifecycleConfigArn?: string;
  StudioLifecycleConfigName?: string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  StudioLifecycleConfigAppType?: StudioLifecycleConfigAppType;
}
export interface ListStudioLifecycleConfigsResponse {
  NextToken?: string;
  StudioLifecycleConfigs?: StudioLifecycleConfigDetails[];
}
export interface ListSubscribedWorkteamsRequest {
  NameContains?: string;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListSubscribedWorkteamsResponse {
  SubscribedWorkteams: SubscribedWorkteam[] | undefined;
  NextToken?: string;
}
export interface ListTagsInput {
  ResourceArn: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListTagsOutput {
  Tags?: Tag[];
  NextToken?: string;
}
export interface ListTrainingJobsRequest {
  NextToken?: string;
  MaxResults?: number;
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  LastModifiedTimeAfter?: Date;
  LastModifiedTimeBefore?: Date;
  NameContains?: string;
  StatusEquals?: TrainingJobStatus;
  SortBy?: SortBy;
  SortOrder?: SortOrder;
  WarmPoolStatusEquals?: WarmPoolResourceStatus;
}
export interface TrainingJobSummary {
  TrainingJobName: string | undefined;
  TrainingJobArn: string | undefined;
  CreationTime: Date | undefined;
  TrainingEndTime?: Date;
  LastModifiedTime?: Date;
  TrainingJobStatus: TrainingJobStatus | undefined;
  WarmPoolStatus?: WarmPoolStatus;
}
export interface ListTrainingJobsResponse {
  TrainingJobSummaries: TrainingJobSummary[] | undefined;
  NextToken?: string;
}
export declare const TrainingJobSortByOptions: {
  readonly CreationTime: "CreationTime";
  readonly FinalObjectiveMetricValue: "FinalObjectiveMetricValue";
  readonly Name: "Name";
  readonly Status: "Status";
};
export type TrainingJobSortByOptions =
  (typeof TrainingJobSortByOptions)[keyof typeof TrainingJobSortByOptions];
export interface ListTrainingJobsForHyperParameterTuningJobRequest {
  HyperParameterTuningJobName: string | undefined;
  NextToken?: string;
  MaxResults?: number;
  StatusEquals?: TrainingJobStatus;
  SortBy?: TrainingJobSortByOptions;
  SortOrder?: SortOrder;
}
export interface ListTrainingJobsForHyperParameterTuningJobResponse {
  TrainingJobSummaries: HyperParameterTrainingJobSummary[] | undefined;
  NextToken?: string;
}
export interface ListTransformJobsRequest {
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  LastModifiedTimeAfter?: Date;
  LastModifiedTimeBefore?: Date;
  NameContains?: string;
  StatusEquals?: TransformJobStatus;
  SortBy?: SortBy;
  SortOrder?: SortOrder;
  NextToken?: string;
  MaxResults?: number;
}
export interface TransformJobSummary {
  TransformJobName: string | undefined;
  TransformJobArn: string | undefined;
  CreationTime: Date | undefined;
  TransformEndTime?: Date;
  LastModifiedTime?: Date;
  TransformJobStatus: TransformJobStatus | undefined;
  FailureReason?: string;
}
export interface ListTransformJobsResponse {
  TransformJobSummaries: TransformJobSummary[] | undefined;
  NextToken?: string;
}
export declare const SortTrialComponentsBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly NAME: "Name";
};
export type SortTrialComponentsBy =
  (typeof SortTrialComponentsBy)[keyof typeof SortTrialComponentsBy];
export interface ListTrialComponentsRequest {
  ExperimentName?: string;
  TrialName?: string;
  SourceArn?: string;
  CreatedAfter?: Date;
  CreatedBefore?: Date;
  SortBy?: SortTrialComponentsBy;
  SortOrder?: SortOrder;
  MaxResults?: number;
  NextToken?: string;
}
export interface TrialComponentSummary {
  TrialComponentName?: string;
  TrialComponentArn?: string;
  DisplayName?: string;
  TrialComponentSource?: TrialComponentSource;
  Status?: TrialComponentStatus;
  StartTime?: Date;
  EndTime?: Date;
  CreationTime?: Date;
  CreatedBy?: UserContext;
  LastModifiedTime?: Date;
  LastModifiedBy?: UserContext;
}
export interface ListTrialComponentsResponse {
  TrialComponentSummaries?: TrialComponentSummary[];
  NextToken?: string;
}
export declare const SortTrialsBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly NAME: "Name";
};
export type SortTrialsBy = (typeof SortTrialsBy)[keyof typeof SortTrialsBy];
export interface ListTrialsRequest {
  ExperimentName?: string;
  TrialComponentName?: string;
  CreatedAfter?: Date;
  CreatedBefore?: Date;
  SortBy?: SortTrialsBy;
  SortOrder?: SortOrder;
  MaxResults?: number;
  NextToken?: string;
}
export interface TrialSummary {
  TrialArn?: string;
  TrialName?: string;
  DisplayName?: string;
  TrialSource?: TrialSource;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export interface ListTrialsResponse {
  TrialSummaries?: TrialSummary[];
  NextToken?: string;
}
export declare const UserProfileSortKey: {
  readonly CreationTime: "CreationTime";
  readonly LastModifiedTime: "LastModifiedTime";
};
export type UserProfileSortKey =
  (typeof UserProfileSortKey)[keyof typeof UserProfileSortKey];
export interface ListUserProfilesRequest {
  NextToken?: string;
  MaxResults?: number;
  SortOrder?: SortOrder;
  SortBy?: UserProfileSortKey;
  DomainIdEquals?: string;
  UserProfileNameContains?: string;
}
export interface UserProfileDetails {
  DomainId?: string;
  UserProfileName?: string;
  Status?: UserProfileStatus;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export interface ListUserProfilesResponse {
  UserProfiles?: UserProfileDetails[];
  NextToken?: string;
}
export declare const ListWorkforcesSortByOptions: {
  readonly CreateDate: "CreateDate";
  readonly Name: "Name";
};
export type ListWorkforcesSortByOptions =
  (typeof ListWorkforcesSortByOptions)[keyof typeof ListWorkforcesSortByOptions];
export interface ListWorkforcesRequest {
  SortBy?: ListWorkforcesSortByOptions;
  SortOrder?: SortOrder;
  NameContains?: string;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListWorkforcesResponse {
  Workforces: Workforce[] | undefined;
  NextToken?: string;
}
export declare const ListWorkteamsSortByOptions: {
  readonly CreateDate: "CreateDate";
  readonly Name: "Name";
};
export type ListWorkteamsSortByOptions =
  (typeof ListWorkteamsSortByOptions)[keyof typeof ListWorkteamsSortByOptions];
export interface ListWorkteamsRequest {
  SortBy?: ListWorkteamsSortByOptions;
  SortOrder?: SortOrder;
  NameContains?: string;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListWorkteamsResponse {
  Workteams: Workteam[] | undefined;
  NextToken?: string;
}
export interface Model {
  ModelName?: string;
  PrimaryContainer?: ContainerDefinition;
  Containers?: ContainerDefinition[];
  InferenceExecutionConfig?: InferenceExecutionConfig;
  ExecutionRoleArn?: string;
  VpcConfig?: VpcConfig;
  CreationTime?: Date;
  ModelArn?: string;
  EnableNetworkIsolation?: boolean;
  Tags?: Tag[];
  DeploymentRecommendation?: DeploymentRecommendation;
}
export interface ModelCard {
  ModelCardArn?: string;
  ModelCardName?: string;
  ModelCardVersion?: number;
  Content?: string;
  ModelCardStatus?: ModelCardStatus;
  SecurityConfig?: ModelCardSecurityConfig;
  CreationTime?: Date;
  CreatedBy?: UserContext;
  LastModifiedTime?: Date;
  LastModifiedBy?: UserContext;
  Tags?: Tag[];
  ModelId?: string;
  RiskRating?: string;
  ModelPackageGroupName?: string;
}
export interface ModelDashboardEndpoint {
  EndpointName: string | undefined;
  EndpointArn: string | undefined;
  CreationTime: Date | undefined;
  LastModifiedTime: Date | undefined;
  EndpointStatus: EndpointStatus | undefined;
}
export interface TransformJob {
  TransformJobName?: string;
  TransformJobArn?: string;
  TransformJobStatus?: TransformJobStatus;
  FailureReason?: string;
  ModelName?: string;
  MaxConcurrentTransforms?: number;
  ModelClientConfig?: ModelClientConfig;
  MaxPayloadInMB?: number;
  BatchStrategy?: BatchStrategy;
  Environment?: Record<string, string>;
  TransformInput?: TransformInput;
  TransformOutput?: TransformOutput;
  DataCaptureConfig?: BatchDataCaptureConfig;
  TransformResources?: TransformResources;
  CreationTime?: Date;
  TransformStartTime?: Date;
  TransformEndTime?: Date;
  LabelingJobArn?: string;
  AutoMLJobArn?: string;
  DataProcessing?: DataProcessing;
  ExperimentConfig?: ExperimentConfig;
  Tags?: Tag[];
}
export interface ModelDashboardModelCard {
  ModelCardArn?: string;
  ModelCardName?: string;
  ModelCardVersion?: number;
  ModelCardStatus?: ModelCardStatus;
  SecurityConfig?: ModelCardSecurityConfig;
  CreationTime?: Date;
  CreatedBy?: UserContext;
  LastModifiedTime?: Date;
  LastModifiedBy?: UserContext;
  Tags?: Tag[];
  ModelId?: string;
  RiskRating?: string;
}
export interface ModelDashboardMonitoringSchedule {
  MonitoringScheduleArn?: string;
  MonitoringScheduleName?: string;
  MonitoringScheduleStatus?: ScheduleStatus;
  MonitoringType?: MonitoringType;
  FailureReason?: string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  MonitoringScheduleConfig?: MonitoringScheduleConfig;
  EndpointName?: string;
  MonitoringAlertSummaries?: MonitoringAlertSummary[];
  LastMonitoringExecutionSummary?: MonitoringExecutionSummary;
  BatchTransformInput?: BatchTransformInput;
}
export interface ModelDashboardModel {
  Model?: Model;
  Endpoints?: ModelDashboardEndpoint[];
  LastBatchTransformJob?: TransformJob;
  MonitoringSchedules?: ModelDashboardMonitoringSchedule[];
  ModelCard?: ModelDashboardModelCard;
}
export interface ModelPackage {
  ModelPackageName?: string;
  ModelPackageGroupName?: string;
  ModelPackageVersion?: number;
  ModelPackageArn?: string;
  ModelPackageDescription?: string;
  CreationTime?: Date;
  InferenceSpecification?: InferenceSpecification;
  SourceAlgorithmSpecification?: SourceAlgorithmSpecification;
  ValidationSpecification?: ModelPackageValidationSpecification;
  ModelPackageStatus?: ModelPackageStatus;
  ModelPackageStatusDetails?: ModelPackageStatusDetails;
  CertifyForMarketplace?: boolean;
  ModelApprovalStatus?: ModelApprovalStatus;
  CreatedBy?: UserContext;
  MetadataProperties?: MetadataProperties;
  ModelMetrics?: ModelMetrics;
  LastModifiedTime?: Date;
  LastModifiedBy?: UserContext;
  ApprovalDescription?: string;
  Domain?: string;
  Task?: string;
  SamplePayloadUrl?: string;
  AdditionalInferenceSpecifications?: AdditionalInferenceSpecificationDefinition[];
  SourceUri?: string;
  SecurityConfig?: ModelPackageSecurityConfig;
  ModelCard?: ModelPackageModelCard;
  Tags?: Tag[];
  CustomerMetadataProperties?: Record<string, string>;
  DriftCheckBaselines?: DriftCheckBaselines;
  SkipModelValidation?: SkipModelValidation;
}
export interface ModelPackageGroup {
  ModelPackageGroupName?: string;
  ModelPackageGroupArn?: string;
  ModelPackageGroupDescription?: string;
  CreationTime?: Date;
  CreatedBy?: UserContext;
  ModelPackageGroupStatus?: ModelPackageGroupStatus;
  Tags?: Tag[];
}
export declare const ModelVariantAction: {
  readonly PROMOTE: "Promote";
  readonly REMOVE: "Remove";
  readonly RETAIN: "Retain";
};
export type ModelVariantAction =
  (typeof ModelVariantAction)[keyof typeof ModelVariantAction];
export interface NestedFilters {
  NestedPropertyName: string | undefined;
  Filters: Filter[] | undefined;
}
export interface OnlineStoreConfigUpdate {
  TtlDuration?: TtlDuration;
}
export interface Parent {
  TrialName?: string;
  ExperimentName?: string;
}
export interface Pipeline {
  PipelineArn?: string;
  PipelineName?: string;
  PipelineDisplayName?: string;
  PipelineDescription?: string;
  RoleArn?: string;
  PipelineStatus?: PipelineStatus;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  LastRunTime?: Date;
  CreatedBy?: UserContext;
  LastModifiedBy?: UserContext;
  ParallelismConfiguration?: ParallelismConfiguration;
  Tags?: Tag[];
}
export interface PipelineExecution {
  PipelineArn?: string;
  PipelineExecutionArn?: string;
  PipelineExecutionDisplayName?: string;
  PipelineExecutionStatus?: PipelineExecutionStatus;
  PipelineExecutionDescription?: string;
  PipelineExperimentConfig?: PipelineExperimentConfig;
  FailureReason?: string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  CreatedBy?: UserContext;
  LastModifiedBy?: UserContext;
  ParallelismConfiguration?: ParallelismConfiguration;
  SelectiveExecutionConfig?: SelectiveExecutionConfig;
  PipelineParameters?: Parameter[];
}
export interface ProcessingJob {
  ProcessingInputs?: ProcessingInput[];
  ProcessingOutputConfig?: ProcessingOutputConfig;
  ProcessingJobName?: string;
  ProcessingResources?: ProcessingResources;
  StoppingCondition?: ProcessingStoppingCondition;
  AppSpecification?: AppSpecification;
  Environment?: Record<string, string>;
  NetworkConfig?: NetworkConfig;
  RoleArn?: string;
  ExperimentConfig?: ExperimentConfig;
  ProcessingJobArn?: string;
  ProcessingJobStatus?: ProcessingJobStatus;
  ExitMessage?: string;
  FailureReason?: string;
  ProcessingEndTime?: Date;
  ProcessingStartTime?: Date;
  LastModifiedTime?: Date;
  CreationTime?: Date;
  MonitoringScheduleArn?: string;
  AutoMLJobArn?: string;
  TrainingJobArn?: string;
  Tags?: Tag[];
}
export interface ProfilerConfigForUpdate {
  S3OutputPath?: string;
  ProfilingIntervalInMilliseconds?: number;
  ProfilingParameters?: Record<string, string>;
  DisableProfiler?: boolean;
}
export interface Project {
  ProjectArn?: string;
  ProjectName?: string;
  ProjectId?: string;
  ProjectDescription?: string;
  ServiceCatalogProvisioningDetails?: ServiceCatalogProvisioningDetails;
  ServiceCatalogProvisionedProductDetails?: ServiceCatalogProvisionedProductDetails;
  ProjectStatus?: ProjectStatus;
  CreatedBy?: UserContext;
  CreationTime?: Date;
  Tags?: Tag[];
  LastModifiedTime?: Date;
  LastModifiedBy?: UserContext;
}
export interface PutModelPackageGroupPolicyInput {
  ModelPackageGroupName: string | undefined;
  ResourcePolicy: string | undefined;
}
export interface PutModelPackageGroupPolicyOutput {
  ModelPackageGroupArn: string | undefined;
}
export interface QueryFilters {
  Types?: string[];
  LineageTypes?: LineageType[];
  CreatedBefore?: Date;
  CreatedAfter?: Date;
  ModifiedBefore?: Date;
  ModifiedAfter?: Date;
  Properties?: Record<string, string>;
}
export interface QueryLineageRequest {
  StartArns?: string[];
  Direction?: Direction;
  IncludeEdges?: boolean;
  Filters?: QueryFilters;
  MaxDepth?: number;
  MaxResults?: number;
  NextToken?: string;
}
export interface Vertex {
  Arn?: string;
  Type?: string;
  LineageType?: LineageType;
}
export interface QueryLineageResponse {
  Vertices?: Vertex[];
  Edges?: Edge[];
  NextToken?: string;
}
export interface RegisterDevicesRequest {
  DeviceFleetName: string | undefined;
  Devices: Device[] | undefined;
  Tags?: Tag[];
}
export interface RemoteDebugConfigForUpdate {
  EnableRemoteDebug?: boolean;
}
export interface RenderableTask {
  Input: string | undefined;
}
export interface RenderingError {
  Code: string | undefined;
  Message: string | undefined;
}
export interface RenderUiTemplateRequest {
  UiTemplate?: UiTemplate;
  Task: RenderableTask | undefined;
  RoleArn: string | undefined;
  HumanTaskUiArn?: string;
}
export interface RenderUiTemplateResponse {
  RenderedContent: string | undefined;
  Errors: RenderingError[] | undefined;
}
export interface ResourceConfigForUpdate {
  KeepAlivePeriodInSeconds: number | undefined;
}
export interface RetryPipelineExecutionRequest {
  PipelineExecutionArn: string | undefined;
  ClientRequestToken?: string;
  ParallelismConfiguration?: ParallelismConfiguration;
}
export interface RetryPipelineExecutionResponse {
  PipelineExecutionArn?: string;
}
export declare const SearchSortOrder: {
  readonly ASCENDING: "Ascending";
  readonly DESCENDING: "Descending";
};
export type SearchSortOrder =
  (typeof SearchSortOrder)[keyof typeof SearchSortOrder];
export interface VisibilityConditions {
  Key?: string;
  Value?: string;
}
export interface TrainingJob {
  TrainingJobName?: string;
  TrainingJobArn?: string;
  TuningJobArn?: string;
  LabelingJobArn?: string;
  AutoMLJobArn?: string;
  ModelArtifacts?: ModelArtifacts;
  TrainingJobStatus?: TrainingJobStatus;
  SecondaryStatus?: SecondaryStatus;
  FailureReason?: string;
  HyperParameters?: Record<string, string>;
  AlgorithmSpecification?: AlgorithmSpecification;
  RoleArn?: string;
  InputDataConfig?: Channel[];
  OutputDataConfig?: OutputDataConfig;
  ResourceConfig?: ResourceConfig;
  VpcConfig?: VpcConfig;
  StoppingCondition?: StoppingCondition;
  CreationTime?: Date;
  TrainingStartTime?: Date;
  TrainingEndTime?: Date;
  LastModifiedTime?: Date;
  SecondaryStatusTransitions?: SecondaryStatusTransition[];
  FinalMetricDataList?: MetricData[];
  EnableNetworkIsolation?: boolean;
  EnableInterContainerTrafficEncryption?: boolean;
  EnableManagedSpotTraining?: boolean;
  CheckpointConfig?: CheckpointConfig;
  TrainingTimeInSeconds?: number;
  BillableTimeInSeconds?: number;
  DebugHookConfig?: DebugHookConfig;
  ExperimentConfig?: ExperimentConfig;
  DebugRuleConfigurations?: DebugRuleConfiguration[];
  TensorBoardOutputConfig?: TensorBoardOutputConfig;
  DebugRuleEvaluationStatuses?: DebugRuleEvaluationStatus[];
  ProfilerConfig?: ProfilerConfig;
  Environment?: Record<string, string>;
  RetryStrategy?: RetryStrategy;
  Tags?: Tag[];
}
export interface TrialComponentSimpleSummary {
  TrialComponentName?: string;
  TrialComponentArn?: string;
  TrialComponentSource?: TrialComponentSource;
  CreationTime?: Date;
  CreatedBy?: UserContext;
}
export interface Trial {
  TrialName?: string;
  TrialArn?: string;
  DisplayName?: string;
  ExperimentName?: string;
  Source?: TrialSource;
  CreationTime?: Date;
  CreatedBy?: UserContext;
  LastModifiedTime?: Date;
  LastModifiedBy?: UserContext;
  MetadataProperties?: MetadataProperties;
  Tags?: Tag[];
  TrialComponentSummaries?: TrialComponentSimpleSummary[];
}
export interface TrialComponentSourceDetail {
  SourceArn?: string;
  TrainingJob?: TrainingJob;
  ProcessingJob?: ProcessingJob;
  TransformJob?: TransformJob;
}
export interface TrialComponent {
  TrialComponentName?: string;
  DisplayName?: string;
  TrialComponentArn?: string;
  Source?: TrialComponentSource;
  Status?: TrialComponentStatus;
  StartTime?: Date;
  EndTime?: Date;
  CreationTime?: Date;
  CreatedBy?: UserContext;
  LastModifiedTime?: Date;
  LastModifiedBy?: UserContext;
  Parameters?: Record<string, TrialComponentParameterValue>;
  InputArtifacts?: Record<string, TrialComponentArtifact>;
  OutputArtifacts?: Record<string, TrialComponentArtifact>;
  Metrics?: TrialComponentMetricSummary[];
  MetadataProperties?: MetadataProperties;
  SourceDetail?: TrialComponentSourceDetail;
  LineageGroupArn?: string;
  Tags?: Tag[];
  Parents?: Parent[];
  RunName?: string;
}
export interface SearchRecord {
  TrainingJob?: TrainingJob;
  Experiment?: Experiment;
  Trial?: Trial;
  TrialComponent?: TrialComponent;
  Endpoint?: Endpoint;
  ModelPackage?: ModelPackage;
  ModelPackageGroup?: ModelPackageGroup;
  Pipeline?: Pipeline;
  PipelineExecution?: PipelineExecution;
  FeatureGroup?: FeatureGroup;
  FeatureMetadata?: FeatureMetadata;
  Project?: Project;
  HyperParameterTuningJob?: HyperParameterTuningJobSearchEntity;
  ModelCard?: ModelCard;
  Model?: ModelDashboardModel;
}
export interface SearchResponse {
  Results?: SearchRecord[];
  NextToken?: string;
}
export interface SendPipelineExecutionStepFailureRequest {
  CallbackToken: string | undefined;
  FailureReason?: string;
  ClientRequestToken?: string;
}
export interface SendPipelineExecutionStepFailureResponse {
  PipelineExecutionArn?: string;
}
export interface SendPipelineExecutionStepSuccessRequest {
  CallbackToken: string | undefined;
  OutputParameters?: OutputParameter[];
  ClientRequestToken?: string;
}
export interface SendPipelineExecutionStepSuccessResponse {
  PipelineExecutionArn?: string;
}
export interface StartEdgeDeploymentStageRequest {
  EdgeDeploymentPlanName: string | undefined;
  StageName: string | undefined;
}
export interface StartInferenceExperimentRequest {
  Name: string | undefined;
}
export interface StartInferenceExperimentResponse {
  InferenceExperimentArn: string | undefined;
}
export interface StartMlflowTrackingServerRequest {
  TrackingServerName: string | undefined;
}
export interface StartMlflowTrackingServerResponse {
  TrackingServerArn?: string;
}
export interface StartMonitoringScheduleRequest {
  MonitoringScheduleName: string | undefined;
}
export interface StartNotebookInstanceInput {
  NotebookInstanceName: string | undefined;
}
export interface StartPipelineExecutionRequest {
  PipelineName: string | undefined;
  PipelineExecutionDisplayName?: string;
  PipelineParameters?: Parameter[];
  PipelineExecutionDescription?: string;
  ClientRequestToken?: string;
  ParallelismConfiguration?: ParallelismConfiguration;
  SelectiveExecutionConfig?: SelectiveExecutionConfig;
}
export interface StartPipelineExecutionResponse {
  PipelineExecutionArn?: string;
}
export interface StopAutoMLJobRequest {
  AutoMLJobName: string | undefined;
}
export interface StopCompilationJobRequest {
  CompilationJobName: string | undefined;
}
export interface StopEdgeDeploymentStageRequest {
  EdgeDeploymentPlanName: string | undefined;
  StageName: string | undefined;
}
export interface StopEdgePackagingJobRequest {
  EdgePackagingJobName: string | undefined;
}
export interface StopHyperParameterTuningJobRequest {
  HyperParameterTuningJobName: string | undefined;
}
export interface StopInferenceExperimentRequest {
  Name: string | undefined;
  ModelVariantActions: Record<string, ModelVariantAction> | undefined;
  DesiredModelVariants?: ModelVariantConfig[];
  DesiredState?: InferenceExperimentStopDesiredState;
  Reason?: string;
}
export interface StopInferenceExperimentResponse {
  InferenceExperimentArn: string | undefined;
}
export interface StopInferenceRecommendationsJobRequest {
  JobName: string | undefined;
}
export interface StopLabelingJobRequest {
  LabelingJobName: string | undefined;
}
export interface StopMlflowTrackingServerRequest {
  TrackingServerName: string | undefined;
}
export interface StopMlflowTrackingServerResponse {
  TrackingServerArn?: string;
}
export interface StopMonitoringScheduleRequest {
  MonitoringScheduleName: string | undefined;
}
export interface StopNotebookInstanceInput {
  NotebookInstanceName: string | undefined;
}
export interface StopOptimizationJobRequest {
  OptimizationJobName: string | undefined;
}
export interface StopPipelineExecutionRequest {
  PipelineExecutionArn: string | undefined;
  ClientRequestToken?: string;
}
export interface StopPipelineExecutionResponse {
  PipelineExecutionArn?: string;
}
export interface StopProcessingJobRequest {
  ProcessingJobName: string | undefined;
}
export interface StopTrainingJobRequest {
  TrainingJobName: string | undefined;
}
export interface StopTransformJobRequest {
  TransformJobName: string | undefined;
}
export interface UpdateActionRequest {
  ActionName: string | undefined;
  Description?: string;
  Status?: ActionStatus;
  Properties?: Record<string, string>;
  PropertiesToRemove?: string[];
}
export interface UpdateActionResponse {
  ActionArn?: string;
}
export interface UpdateAppImageConfigRequest {
  AppImageConfigName: string | undefined;
  KernelGatewayImageConfig?: KernelGatewayImageConfig;
  JupyterLabAppImageConfig?: JupyterLabAppImageConfig;
  CodeEditorAppImageConfig?: CodeEditorAppImageConfig;
}
export interface UpdateAppImageConfigResponse {
  AppImageConfigArn?: string;
}
export interface UpdateArtifactRequest {
  ArtifactArn: string | undefined;
  ArtifactName?: string;
  Properties?: Record<string, string>;
  PropertiesToRemove?: string[];
}
export interface UpdateArtifactResponse {
  ArtifactArn?: string;
}
export interface UpdateClusterRequest {
  ClusterName: string | undefined;
  InstanceGroups: ClusterInstanceGroupSpecification[] | undefined;
}
export interface UpdateClusterResponse {
  ClusterArn: string | undefined;
}
export interface UpdateClusterSoftwareRequest {
  ClusterName: string | undefined;
}
export interface UpdateClusterSoftwareResponse {
  ClusterArn: string | undefined;
}
export interface UpdateCodeRepositoryInput {
  CodeRepositoryName: string | undefined;
  GitConfig?: GitConfigForUpdate;
}
export interface UpdateCodeRepositoryOutput {
  CodeRepositoryArn: string | undefined;
}
export interface UpdateContextRequest {
  ContextName: string | undefined;
  Description?: string;
  Properties?: Record<string, string>;
  PropertiesToRemove?: string[];
}
export interface UpdateContextResponse {
  ContextArn?: string;
}
export interface UpdateDeviceFleetRequest {
  DeviceFleetName: string | undefined;
  RoleArn?: string;
  Description?: string;
  OutputConfig: EdgeOutputConfig | undefined;
  EnableIotRoleAlias?: boolean;
}
export interface UpdateDevicesRequest {
  DeviceFleetName: string | undefined;
  Devices: Device[] | undefined;
}
export interface UpdateDomainRequest {
  DomainId: string | undefined;
  DefaultUserSettings?: UserSettings;
  DomainSettingsForUpdate?: DomainSettingsForUpdate;
  AppSecurityGroupManagement?: AppSecurityGroupManagement;
  DefaultSpaceSettings?: DefaultSpaceSettings;
  SubnetIds?: string[];
  AppNetworkAccessType?: AppNetworkAccessType;
}
export interface UpdateDomainResponse {
  DomainArn?: string;
}
export declare const VariantPropertyType: {
  readonly DataCaptureConfig: "DataCaptureConfig";
  readonly DesiredInstanceCount: "DesiredInstanceCount";
  readonly DesiredWeight: "DesiredWeight";
};
export type VariantPropertyType =
  (typeof VariantPropertyType)[keyof typeof VariantPropertyType];
export interface VariantProperty {
  VariantPropertyType: VariantPropertyType | undefined;
}
export interface UpdateEndpointInput {
  EndpointName: string | undefined;
  EndpointConfigName: string | undefined;
  RetainAllVariantProperties?: boolean;
  ExcludeRetainedVariantProperties?: VariantProperty[];
  DeploymentConfig?: DeploymentConfig;
  RetainDeploymentConfig?: boolean;
}
export interface UpdateEndpointOutput {
  EndpointArn: string | undefined;
}
export interface UpdateEndpointWeightsAndCapacitiesInput {
  EndpointName: string | undefined;
  DesiredWeightsAndCapacities: DesiredWeightAndCapacity[] | undefined;
}
export interface UpdateEndpointWeightsAndCapacitiesOutput {
  EndpointArn: string | undefined;
}
export interface UpdateExperimentRequest {
  ExperimentName: string | undefined;
  DisplayName?: string;
  Description?: string;
}
export interface UpdateExperimentResponse {
  ExperimentArn?: string;
}
export interface ThroughputConfigUpdate {
  ThroughputMode?: ThroughputMode;
  ProvisionedReadCapacityUnits?: number;
  ProvisionedWriteCapacityUnits?: number;
}
export interface UpdateFeatureGroupRequest {
  FeatureGroupName: string | undefined;
  FeatureAdditions?: FeatureDefinition[];
  OnlineStoreConfig?: OnlineStoreConfigUpdate;
  ThroughputConfig?: ThroughputConfigUpdate;
}
export interface UpdateFeatureGroupResponse {
  FeatureGroupArn: string | undefined;
}
export interface UpdateFeatureMetadataRequest {
  FeatureGroupName: string | undefined;
  FeatureName: string | undefined;
  Description?: string;
  ParameterAdditions?: FeatureParameter[];
  ParameterRemovals?: string[];
}
export interface UpdateHubRequest {
  HubName: string | undefined;
  HubDescription?: string;
  HubDisplayName?: string;
  HubSearchKeywords?: string[];
}
export interface UpdateHubResponse {
  HubArn: string | undefined;
}
export interface UpdateImageRequest {
  DeleteProperties?: string[];
  Description?: string;
  DisplayName?: string;
  ImageName: string | undefined;
  RoleArn?: string;
}
export interface UpdateImageResponse {
  ImageArn?: string;
}
export interface UpdateImageVersionRequest {
  ImageName: string | undefined;
  Alias?: string;
  Version?: number;
  AliasesToAdd?: string[];
  AliasesToDelete?: string[];
  VendorGuidance?: VendorGuidance;
  JobType?: JobType;
  MLFramework?: string;
  ProgrammingLang?: string;
  Processor?: Processor;
  Horovod?: boolean;
  ReleaseNotes?: string;
}
export interface UpdateImageVersionResponse {
  ImageVersionArn?: string;
}
export interface UpdateInferenceComponentInput {
  InferenceComponentName: string | undefined;
  Specification?: InferenceComponentSpecification;
  RuntimeConfig?: InferenceComponentRuntimeConfig;
}
export interface UpdateInferenceComponentOutput {
  InferenceComponentArn: string | undefined;
}
export interface UpdateInferenceComponentRuntimeConfigInput {
  InferenceComponentName: string | undefined;
  DesiredRuntimeConfig: InferenceComponentRuntimeConfig | undefined;
}
export interface UpdateInferenceComponentRuntimeConfigOutput {
  InferenceComponentArn: string | undefined;
}
export interface UpdateInferenceExperimentRequest {
  Name: string | undefined;
  Schedule?: InferenceExperimentSchedule;
  Description?: string;
  ModelVariants?: ModelVariantConfig[];
  DataStorageConfig?: InferenceExperimentDataStorageConfig;
  ShadowModeConfig?: ShadowModeConfig;
}
export interface UpdateInferenceExperimentResponse {
  InferenceExperimentArn: string | undefined;
}
export interface UpdateMlflowTrackingServerRequest {
  TrackingServerName: string | undefined;
  ArtifactStoreUri?: string;
  TrackingServerSize?: TrackingServerSize;
  AutomaticModelRegistration?: boolean;
  WeeklyMaintenanceWindowStart?: string;
}
export interface UpdateMlflowTrackingServerResponse {
  TrackingServerArn?: string;
}
export interface UpdateModelCardRequest {
  ModelCardName: string | undefined;
  Content?: string;
  ModelCardStatus?: ModelCardStatus;
}
export interface UpdateModelCardResponse {
  ModelCardArn: string | undefined;
}
export interface UpdateModelPackageInput {
  ModelPackageArn: string | undefined;
  ModelApprovalStatus?: ModelApprovalStatus;
  ApprovalDescription?: string;
  CustomerMetadataProperties?: Record<string, string>;
  CustomerMetadataPropertiesToRemove?: string[];
  AdditionalInferenceSpecificationsToAdd?: AdditionalInferenceSpecificationDefinition[];
  InferenceSpecification?: InferenceSpecification;
  SourceUri?: string;
  ModelCard?: ModelPackageModelCard;
}
export interface UpdateModelPackageOutput {
  ModelPackageArn: string | undefined;
}
export interface UpdateMonitoringAlertRequest {
  MonitoringScheduleName: string | undefined;
  MonitoringAlertName: string | undefined;
  DatapointsToAlert: number | undefined;
  EvaluationPeriod: number | undefined;
}
export interface UpdateMonitoringAlertResponse {
  MonitoringScheduleArn: string | undefined;
  MonitoringAlertName?: string;
}
export interface UpdateMonitoringScheduleRequest {
  MonitoringScheduleName: string | undefined;
  MonitoringScheduleConfig: MonitoringScheduleConfig | undefined;
}
export interface UpdateMonitoringScheduleResponse {
  MonitoringScheduleArn: string | undefined;
}
export interface UpdateNotebookInstanceInput {
  NotebookInstanceName: string | undefined;
  InstanceType?: _InstanceType;
  RoleArn?: string;
  LifecycleConfigName?: string;
  DisassociateLifecycleConfig?: boolean;
  VolumeSizeInGB?: number;
  DefaultCodeRepository?: string;
  AdditionalCodeRepositories?: string[];
  AcceleratorTypes?: NotebookInstanceAcceleratorType[];
  DisassociateAcceleratorTypes?: boolean;
  DisassociateDefaultCodeRepository?: boolean;
  DisassociateAdditionalCodeRepositories?: boolean;
  RootAccess?: RootAccess;
  InstanceMetadataServiceConfiguration?: InstanceMetadataServiceConfiguration;
}
export interface UpdateNotebookInstanceOutput {}
export interface UpdateNotebookInstanceLifecycleConfigInput {
  NotebookInstanceLifecycleConfigName: string | undefined;
  OnCreate?: NotebookInstanceLifecycleHook[];
  OnStart?: NotebookInstanceLifecycleHook[];
}
export interface UpdateNotebookInstanceLifecycleConfigOutput {}
export interface UpdatePipelineRequest {
  PipelineName: string | undefined;
  PipelineDisplayName?: string;
  PipelineDefinition?: string;
  PipelineDefinitionS3Location?: PipelineDefinitionS3Location;
  PipelineDescription?: string;
  RoleArn?: string;
  ParallelismConfiguration?: ParallelismConfiguration;
}
export interface UpdatePipelineResponse {
  PipelineArn?: string;
}
export interface UpdatePipelineExecutionRequest {
  PipelineExecutionArn: string | undefined;
  PipelineExecutionDescription?: string;
  PipelineExecutionDisplayName?: string;
  ParallelismConfiguration?: ParallelismConfiguration;
}
export interface UpdatePipelineExecutionResponse {
  PipelineExecutionArn?: string;
}
export interface ServiceCatalogProvisioningUpdateDetails {
  ProvisioningArtifactId?: string;
  ProvisioningParameters?: ProvisioningParameter[];
}
export interface UpdateProjectInput {
  ProjectName: string | undefined;
  ProjectDescription?: string;
  ServiceCatalogProvisioningUpdateDetails?: ServiceCatalogProvisioningUpdateDetails;
  Tags?: Tag[];
}
export interface UpdateProjectOutput {
  ProjectArn: string | undefined;
}
export interface UpdateSpaceRequest {
  DomainId: string | undefined;
  SpaceName: string | undefined;
  SpaceSettings?: SpaceSettings;
  SpaceDisplayName?: string;
}
export interface UpdateSpaceResponse {
  SpaceArn?: string;
}
export interface UpdateTrainingJobRequest {
  TrainingJobName: string | undefined;
  ProfilerConfig?: ProfilerConfigForUpdate;
  ProfilerRuleConfigurations?: ProfilerRuleConfiguration[];
  ResourceConfig?: ResourceConfigForUpdate;
  RemoteDebugConfig?: RemoteDebugConfigForUpdate;
}
export interface UpdateTrainingJobResponse {
  TrainingJobArn: string | undefined;
}
export interface UpdateTrialRequest {
  TrialName: string | undefined;
  DisplayName?: string;
}
export interface UpdateTrialResponse {
  TrialArn?: string;
}
export interface UpdateTrialComponentRequest {
  TrialComponentName: string | undefined;
  DisplayName?: string;
  Status?: TrialComponentStatus;
  StartTime?: Date;
  EndTime?: Date;
  Parameters?: Record<string, TrialComponentParameterValue>;
  ParametersToRemove?: string[];
  InputArtifacts?: Record<string, TrialComponentArtifact>;
  InputArtifactsToRemove?: string[];
  OutputArtifacts?: Record<string, TrialComponentArtifact>;
  OutputArtifactsToRemove?: string[];
}
export interface UpdateTrialComponentResponse {
  TrialComponentArn?: string;
}
export interface UpdateUserProfileRequest {
  DomainId: string | undefined;
  UserProfileName: string | undefined;
  UserSettings?: UserSettings;
}
export interface UpdateUserProfileResponse {
  UserProfileArn?: string;
}
export interface UpdateWorkforceRequest {
  WorkforceName: string | undefined;
  SourceIpConfig?: SourceIpConfig;
  OidcConfig?: OidcConfig;
  WorkforceVpcConfig?: WorkforceVpcConfigRequest;
}
export interface UpdateWorkforceResponse {
  Workforce: Workforce | undefined;
}
export interface UpdateWorkteamRequest {
  WorkteamName: string | undefined;
  MemberDefinitions?: MemberDefinition[];
  Description?: string;
  NotificationConfiguration?: NotificationConfiguration;
  WorkerAccessConfiguration?: WorkerAccessConfiguration;
}
export interface UpdateWorkteamResponse {
  Workteam: Workteam | undefined;
}
export interface SearchExpression {
  Filters?: Filter[];
  NestedFilters?: NestedFilters[];
  SubExpressions?: SearchExpression[];
  Operator?: BooleanOperator;
}
export interface SearchRequest {
  Resource: ResourceType | undefined;
  SearchExpression?: SearchExpression;
  SortBy?: string;
  SortOrder?: SearchSortOrder;
  NextToken?: string;
  MaxResults?: number;
  CrossAccountFilterOption?: CrossAccountFilterOption;
  VisibilityConditions?: VisibilityConditions[];
}
export declare const ModelCardFilterSensitiveLog: (obj: ModelCard) => any;
export declare const ModelPackageFilterSensitiveLog: (obj: ModelPackage) => any;
export declare const SearchRecordFilterSensitiveLog: (obj: SearchRecord) => any;
export declare const SearchResponseFilterSensitiveLog: (
  obj: SearchResponse
) => any;
export declare const UpdateModelCardRequestFilterSensitiveLog: (
  obj: UpdateModelCardRequest
) => any;
export declare const UpdateModelPackageInputFilterSensitiveLog: (
  obj: UpdateModelPackageInput
) => any;
export declare const UpdateWorkforceRequestFilterSensitiveLog: (
  obj: UpdateWorkforceRequest
) => any;
