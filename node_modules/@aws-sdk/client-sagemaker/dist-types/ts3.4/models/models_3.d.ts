import {
  ActionSummary,
  AdditionalInferenceSpecificationDefinition,
  AgentVersion,
  AlgorithmSortBy,
  AlgorithmSpecification,
  AlgorithmSummary,
  AmazonQSettings,
  AppDetails,
  AppImageConfigDetails,
  AppImageConfigSortKey,
  AppSortKey,
  AppSpecification,
  ArtifactSummary,
  AssociationEdgeType,
  AssociationSummary,
  AutoMLCandidate,
  AutoMLJobStatus,
  AutoMLJobSummary,
  AutoMLSortBy,
  AutoMLSortOrder,
  BatchDataCaptureConfig,
  BatchStrategy,
  CandidateSortBy,
  CandidateStatus,
  Channel,
  CheckpointConfig,
  ClusterNodeSummary,
  ClusterSortBy,
  ClusterSummary,
  CodeRepositorySortBy,
  CodeRepositorySortOrder,
  CodeRepositorySummary,
  CognitoConfig,
  CompilationJobStatus,
  CompilationJobSummary,
  ContextSummary,
  InferenceSpecification,
  MetadataProperties,
  ModelApprovalStatus,
  ModelPackageStatus,
  OutputDataConfig,
  OutputParameter,
  ResourceConfig,
  ResourceSpec,
  StoppingCondition,
  Tag,
  TransformInput,
  TransformOutput,
  TransformResources,
  UserContext,
  VpcConfig,
} from "./models_0";
import {
  _InstanceType,
  DirectInternetAccess,
  DockerSettings,
  DriftCheckBaselines,
  EdgeOutputConfig,
  ExecutionRoleIdentityConfig,
  ExperimentConfig,
  FeatureDefinition,
  FeatureType,
  HyperParameterTrainingJobDefinition,
  HyperParameterTuningJobConfig,
  HyperParameterTuningJobStrategyType,
  HyperParameterTuningJobWarmStartConfig,
  InferenceExperimentSchedule,
  InferenceExperimentType,
  InstanceMetadataServiceConfiguration,
  LabelingJobInputConfig,
  ModelCardExportOutputConfig,
  ModelCardSecurityConfig,
  ModelCardStatus,
  ModelExplainabilityAppSpecification,
  ModelExplainabilityBaselineConfig,
  ModelExplainabilityJobInput,
  ModelMetrics,
  ModelPackageModelCard,
  ModelPackageSecurityConfig,
  ModelPackageValidationSpecification,
  ModelQualityAppSpecification,
  ModelQualityBaselineConfig,
  ModelQualityJobInput,
  MonitoringNetworkConfig,
  MonitoringOutputConfig,
  MonitoringResources,
  MonitoringScheduleConfig,
  MonitoringStoppingCondition,
  MonitoringType,
  NetworkConfig,
  NotebookInstanceAcceleratorType,
  NotebookInstanceLifecycleHook,
  OfflineStoreConfig,
  OnlineStoreConfig,
  OptimizationConfig,
  OptimizationJobDeploymentInstanceType,
  OptimizationJobModelSource,
  OptimizationJobOutputConfig,
  OptimizationVpcConfig,
  ParallelismConfiguration,
  RecommendationJobType,
  ResourceLimits,
  RetryStrategy,
  RootAccess,
  SkipModelValidation,
  SourceAlgorithmSpecification,
  UserSettings,
} from "./models_1";
import {
  CustomizedMetricSpecification,
  DataCaptureConfigSummary,
  DataProcessing,
  DebugHookConfig,
  DebugRuleConfiguration,
  DebugRuleEvaluationStatus,
  DomainStatus,
  EdgePackagingJobStatus,
  EndpointOutputConfiguration,
  EndpointStatus,
  ExperimentSource,
  FeatureGroupStatus,
  FeatureParameter,
  FlowDefinitionStatus,
  HubContentStatus,
  HubContentSupportStatus,
  HubContentType,
  HubStatus,
  HyperParameterTrainingJobSummary,
  HyperParameterTuningJobCompletionDetails,
  HyperParameterTuningJobConsumedResources,
  HyperParameterTuningJobStatus,
  ImageStatus,
  ImageVersionStatus,
  InferenceComponentStatus,
  InferenceExperimentStatus,
  InferenceMetrics,
  InfraCheckConfig,
  IsTrackingServerActive,
  LabelCounters,
  LabelingJobOutput,
  LabelingJobStatus,
  LastUpdateStatus,
  MemberDefinition,
  ModelArtifacts,
  ModelCardProcessingStatus,
  ModelClientConfig,
  ModelConfiguration,
  NotificationConfiguration,
  ObjectiveStatusCounters,
  OfflineStoreStatus,
  OfflineStoreStatusValue,
  OwnershipSettings,
  ProcessingInput,
  ProcessingOutputConfig,
  ProcessingResources,
  ProcessingStoppingCondition,
  ProductionVariantSummary,
  ProfilerConfig,
  ProfilerRuleConfiguration,
  RecommendationJobStatus,
  RecommendationMetrics,
  RemoteDebugConfig,
  RuleEvaluationStatus,
  ServiceCatalogProvisioningDetails,
  SourceIpConfig,
  SpaceSettings,
  SpaceSharingSettings,
  StudioLifecycleConfigAppType,
  TensorBoardOutputConfig,
  TrackingServerStatus,
  TrainingJobStatus,
  TrainingJobStatusCounters,
  TrialComponentArtifact,
  TrialComponentParameterValue,
  TrialComponentStatus,
  WorkerAccessConfiguration,
} from "./models_2";
export interface DescribeModelCardResponse {
  ModelCardArn: string | undefined;
  ModelCardName: string | undefined;
  ModelCardVersion: number | undefined;
  Content: string | undefined;
  ModelCardStatus: ModelCardStatus | undefined;
  SecurityConfig?: ModelCardSecurityConfig;
  CreationTime: Date | undefined;
  CreatedBy: UserContext | undefined;
  LastModifiedTime?: Date;
  LastModifiedBy?: UserContext;
  ModelCardProcessingStatus?: ModelCardProcessingStatus;
}
export interface DescribeModelCardExportJobRequest {
  ModelCardExportJobArn: string | undefined;
}
export interface ModelCardExportArtifacts {
  S3ExportArtifacts: string | undefined;
}
export declare const ModelCardExportJobStatus: {
  readonly COMPLETED: "Completed";
  readonly FAILED: "Failed";
  readonly IN_PROGRESS: "InProgress";
};
export type ModelCardExportJobStatus =
  (typeof ModelCardExportJobStatus)[keyof typeof ModelCardExportJobStatus];
export interface DescribeModelCardExportJobResponse {
  ModelCardExportJobName: string | undefined;
  ModelCardExportJobArn: string | undefined;
  Status: ModelCardExportJobStatus | undefined;
  ModelCardName: string | undefined;
  ModelCardVersion: number | undefined;
  OutputConfig: ModelCardExportOutputConfig | undefined;
  CreatedAt: Date | undefined;
  LastModifiedAt: Date | undefined;
  FailureReason?: string;
  ExportArtifacts?: ModelCardExportArtifacts;
}
export interface DescribeModelExplainabilityJobDefinitionRequest {
  JobDefinitionName: string | undefined;
}
export interface DescribeModelExplainabilityJobDefinitionResponse {
  JobDefinitionArn: string | undefined;
  JobDefinitionName: string | undefined;
  CreationTime: Date | undefined;
  ModelExplainabilityBaselineConfig?: ModelExplainabilityBaselineConfig;
  ModelExplainabilityAppSpecification:
    | ModelExplainabilityAppSpecification
    | undefined;
  ModelExplainabilityJobInput: ModelExplainabilityJobInput | undefined;
  ModelExplainabilityJobOutputConfig: MonitoringOutputConfig | undefined;
  JobResources: MonitoringResources | undefined;
  NetworkConfig?: MonitoringNetworkConfig;
  RoleArn: string | undefined;
  StoppingCondition?: MonitoringStoppingCondition;
}
export interface DescribeModelPackageInput {
  ModelPackageName: string | undefined;
}
export declare const DetailedModelPackageStatus: {
  readonly COMPLETED: "Completed";
  readonly FAILED: "Failed";
  readonly IN_PROGRESS: "InProgress";
  readonly NOT_STARTED: "NotStarted";
};
export type DetailedModelPackageStatus =
  (typeof DetailedModelPackageStatus)[keyof typeof DetailedModelPackageStatus];
export interface ModelPackageStatusItem {
  Name: string | undefined;
  Status: DetailedModelPackageStatus | undefined;
  FailureReason?: string;
}
export interface ModelPackageStatusDetails {
  ValidationStatuses: ModelPackageStatusItem[] | undefined;
  ImageScanStatuses?: ModelPackageStatusItem[];
}
export interface DescribeModelPackageOutput {
  ModelPackageName: string | undefined;
  ModelPackageGroupName?: string;
  ModelPackageVersion?: number;
  ModelPackageArn: string | undefined;
  ModelPackageDescription?: string;
  CreationTime: Date | undefined;
  InferenceSpecification?: InferenceSpecification;
  SourceAlgorithmSpecification?: SourceAlgorithmSpecification;
  ValidationSpecification?: ModelPackageValidationSpecification;
  ModelPackageStatus: ModelPackageStatus | undefined;
  ModelPackageStatusDetails: ModelPackageStatusDetails | undefined;
  CertifyForMarketplace?: boolean;
  ModelApprovalStatus?: ModelApprovalStatus;
  CreatedBy?: UserContext;
  MetadataProperties?: MetadataProperties;
  ModelMetrics?: ModelMetrics;
  LastModifiedTime?: Date;
  LastModifiedBy?: UserContext;
  ApprovalDescription?: string;
  Domain?: string;
  Task?: string;
  SamplePayloadUrl?: string;
  CustomerMetadataProperties?: Record<string, string>;
  DriftCheckBaselines?: DriftCheckBaselines;
  AdditionalInferenceSpecifications?: AdditionalInferenceSpecificationDefinition[];
  SkipModelValidation?: SkipModelValidation;
  SourceUri?: string;
  SecurityConfig?: ModelPackageSecurityConfig;
  ModelCard?: ModelPackageModelCard;
}
export interface DescribeModelPackageGroupInput {
  ModelPackageGroupName: string | undefined;
}
export declare const ModelPackageGroupStatus: {
  readonly COMPLETED: "Completed";
  readonly DELETE_FAILED: "DeleteFailed";
  readonly DELETING: "Deleting";
  readonly FAILED: "Failed";
  readonly IN_PROGRESS: "InProgress";
  readonly PENDING: "Pending";
};
export type ModelPackageGroupStatus =
  (typeof ModelPackageGroupStatus)[keyof typeof ModelPackageGroupStatus];
export interface DescribeModelPackageGroupOutput {
  ModelPackageGroupName: string | undefined;
  ModelPackageGroupArn: string | undefined;
  ModelPackageGroupDescription?: string;
  CreationTime: Date | undefined;
  CreatedBy: UserContext | undefined;
  ModelPackageGroupStatus: ModelPackageGroupStatus | undefined;
}
export interface DescribeModelQualityJobDefinitionRequest {
  JobDefinitionName: string | undefined;
}
export interface DescribeModelQualityJobDefinitionResponse {
  JobDefinitionArn: string | undefined;
  JobDefinitionName: string | undefined;
  CreationTime: Date | undefined;
  ModelQualityBaselineConfig?: ModelQualityBaselineConfig;
  ModelQualityAppSpecification: ModelQualityAppSpecification | undefined;
  ModelQualityJobInput: ModelQualityJobInput | undefined;
  ModelQualityJobOutputConfig: MonitoringOutputConfig | undefined;
  JobResources: MonitoringResources | undefined;
  NetworkConfig?: MonitoringNetworkConfig;
  RoleArn: string | undefined;
  StoppingCondition?: MonitoringStoppingCondition;
}
export interface DescribeMonitoringScheduleRequest {
  MonitoringScheduleName: string | undefined;
}
export declare const ExecutionStatus: {
  readonly COMPLETED: "Completed";
  readonly COMPLETED_WITH_VIOLATIONS: "CompletedWithViolations";
  readonly FAILED: "Failed";
  readonly IN_PROGRESS: "InProgress";
  readonly PENDING: "Pending";
  readonly STOPPED: "Stopped";
  readonly STOPPING: "Stopping";
};
export type ExecutionStatus =
  (typeof ExecutionStatus)[keyof typeof ExecutionStatus];
export interface MonitoringExecutionSummary {
  MonitoringScheduleName: string | undefined;
  ScheduledTime: Date | undefined;
  CreationTime: Date | undefined;
  LastModifiedTime: Date | undefined;
  MonitoringExecutionStatus: ExecutionStatus | undefined;
  ProcessingJobArn?: string;
  EndpointName?: string;
  FailureReason?: string;
  MonitoringJobDefinitionName?: string;
  MonitoringType?: MonitoringType;
}
export declare const ScheduleStatus: {
  readonly FAILED: "Failed";
  readonly PENDING: "Pending";
  readonly SCHEDULED: "Scheduled";
  readonly STOPPED: "Stopped";
};
export type ScheduleStatus =
  (typeof ScheduleStatus)[keyof typeof ScheduleStatus];
export interface DescribeMonitoringScheduleResponse {
  MonitoringScheduleArn: string | undefined;
  MonitoringScheduleName: string | undefined;
  MonitoringScheduleStatus: ScheduleStatus | undefined;
  MonitoringType?: MonitoringType;
  FailureReason?: string;
  CreationTime: Date | undefined;
  LastModifiedTime: Date | undefined;
  MonitoringScheduleConfig: MonitoringScheduleConfig | undefined;
  EndpointName?: string;
  LastMonitoringExecutionSummary?: MonitoringExecutionSummary;
}
export interface DescribeNotebookInstanceInput {
  NotebookInstanceName: string | undefined;
}
export declare const NotebookInstanceStatus: {
  readonly Deleting: "Deleting";
  readonly Failed: "Failed";
  readonly InService: "InService";
  readonly Pending: "Pending";
  readonly Stopped: "Stopped";
  readonly Stopping: "Stopping";
  readonly Updating: "Updating";
};
export type NotebookInstanceStatus =
  (typeof NotebookInstanceStatus)[keyof typeof NotebookInstanceStatus];
export interface DescribeNotebookInstanceOutput {
  NotebookInstanceArn?: string;
  NotebookInstanceName?: string;
  NotebookInstanceStatus?: NotebookInstanceStatus;
  FailureReason?: string;
  Url?: string;
  InstanceType?: _InstanceType;
  SubnetId?: string;
  SecurityGroups?: string[];
  RoleArn?: string;
  KmsKeyId?: string;
  NetworkInterfaceId?: string;
  LastModifiedTime?: Date;
  CreationTime?: Date;
  NotebookInstanceLifecycleConfigName?: string;
  DirectInternetAccess?: DirectInternetAccess;
  VolumeSizeInGB?: number;
  AcceleratorTypes?: NotebookInstanceAcceleratorType[];
  DefaultCodeRepository?: string;
  AdditionalCodeRepositories?: string[];
  RootAccess?: RootAccess;
  PlatformIdentifier?: string;
  InstanceMetadataServiceConfiguration?: InstanceMetadataServiceConfiguration;
}
export interface DescribeNotebookInstanceLifecycleConfigInput {
  NotebookInstanceLifecycleConfigName: string | undefined;
}
export interface DescribeNotebookInstanceLifecycleConfigOutput {
  NotebookInstanceLifecycleConfigArn?: string;
  NotebookInstanceLifecycleConfigName?: string;
  OnCreate?: NotebookInstanceLifecycleHook[];
  OnStart?: NotebookInstanceLifecycleHook[];
  LastModifiedTime?: Date;
  CreationTime?: Date;
}
export interface DescribeOptimizationJobRequest {
  OptimizationJobName: string | undefined;
}
export declare const OptimizationJobStatus: {
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly INPROGRESS: "INPROGRESS";
  readonly STARTING: "STARTING";
  readonly STOPPED: "STOPPED";
  readonly STOPPING: "STOPPING";
};
export type OptimizationJobStatus =
  (typeof OptimizationJobStatus)[keyof typeof OptimizationJobStatus];
export interface OptimizationOutput {
  RecommendedInferenceImage?: string;
}
export interface DescribeOptimizationJobResponse {
  OptimizationJobArn: string | undefined;
  OptimizationJobStatus: OptimizationJobStatus | undefined;
  OptimizationStartTime?: Date;
  OptimizationEndTime?: Date;
  CreationTime: Date | undefined;
  LastModifiedTime: Date | undefined;
  FailureReason?: string;
  OptimizationJobName: string | undefined;
  ModelSource: OptimizationJobModelSource | undefined;
  OptimizationEnvironment?: Record<string, string>;
  DeploymentInstanceType: OptimizationJobDeploymentInstanceType | undefined;
  OptimizationConfigs: OptimizationConfig[] | undefined;
  OutputConfig: OptimizationJobOutputConfig | undefined;
  OptimizationOutput?: OptimizationOutput;
  RoleArn: string | undefined;
  StoppingCondition: StoppingCondition | undefined;
  VpcConfig?: OptimizationVpcConfig;
}
export interface DescribePipelineRequest {
  PipelineName: string | undefined;
}
export declare const PipelineStatus: {
  readonly ACTIVE: "Active";
  readonly DELETING: "Deleting";
};
export type PipelineStatus =
  (typeof PipelineStatus)[keyof typeof PipelineStatus];
export interface DescribePipelineResponse {
  PipelineArn?: string;
  PipelineName?: string;
  PipelineDisplayName?: string;
  PipelineDefinition?: string;
  PipelineDescription?: string;
  RoleArn?: string;
  PipelineStatus?: PipelineStatus;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  LastRunTime?: Date;
  CreatedBy?: UserContext;
  LastModifiedBy?: UserContext;
  ParallelismConfiguration?: ParallelismConfiguration;
}
export interface DescribePipelineDefinitionForExecutionRequest {
  PipelineExecutionArn: string | undefined;
}
export interface DescribePipelineDefinitionForExecutionResponse {
  PipelineDefinition?: string;
  CreationTime?: Date;
}
export interface DescribePipelineExecutionRequest {
  PipelineExecutionArn: string | undefined;
}
export declare const PipelineExecutionStatus: {
  readonly EXECUTING: "Executing";
  readonly FAILED: "Failed";
  readonly STOPPED: "Stopped";
  readonly STOPPING: "Stopping";
  readonly SUCCEEDED: "Succeeded";
};
export type PipelineExecutionStatus =
  (typeof PipelineExecutionStatus)[keyof typeof PipelineExecutionStatus];
export interface PipelineExperimentConfig {
  ExperimentName?: string;
  TrialName?: string;
}
export interface SelectedStep {
  StepName: string | undefined;
}
export interface SelectiveExecutionConfig {
  SourcePipelineExecutionArn?: string;
  SelectedSteps: SelectedStep[] | undefined;
}
export interface DescribePipelineExecutionResponse {
  PipelineArn?: string;
  PipelineExecutionArn?: string;
  PipelineExecutionDisplayName?: string;
  PipelineExecutionStatus?: PipelineExecutionStatus;
  PipelineExecutionDescription?: string;
  PipelineExperimentConfig?: PipelineExperimentConfig;
  FailureReason?: string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  CreatedBy?: UserContext;
  LastModifiedBy?: UserContext;
  ParallelismConfiguration?: ParallelismConfiguration;
  SelectiveExecutionConfig?: SelectiveExecutionConfig;
}
export interface DescribeProcessingJobRequest {
  ProcessingJobName: string | undefined;
}
export declare const ProcessingJobStatus: {
  readonly COMPLETED: "Completed";
  readonly FAILED: "Failed";
  readonly IN_PROGRESS: "InProgress";
  readonly STOPPED: "Stopped";
  readonly STOPPING: "Stopping";
};
export type ProcessingJobStatus =
  (typeof ProcessingJobStatus)[keyof typeof ProcessingJobStatus];
export interface DescribeProcessingJobResponse {
  ProcessingInputs?: ProcessingInput[];
  ProcessingOutputConfig?: ProcessingOutputConfig;
  ProcessingJobName: string | undefined;
  ProcessingResources: ProcessingResources | undefined;
  StoppingCondition?: ProcessingStoppingCondition;
  AppSpecification: AppSpecification | undefined;
  Environment?: Record<string, string>;
  NetworkConfig?: NetworkConfig;
  RoleArn?: string;
  ExperimentConfig?: ExperimentConfig;
  ProcessingJobArn: string | undefined;
  ProcessingJobStatus: ProcessingJobStatus | undefined;
  ExitMessage?: string;
  FailureReason?: string;
  ProcessingEndTime?: Date;
  ProcessingStartTime?: Date;
  LastModifiedTime?: Date;
  CreationTime: Date | undefined;
  MonitoringScheduleArn?: string;
  AutoMLJobArn?: string;
  TrainingJobArn?: string;
}
export interface DescribeProjectInput {
  ProjectName: string | undefined;
}
export declare const ProjectStatus: {
  readonly CREATE_COMPLETED: "CreateCompleted";
  readonly CREATE_FAILED: "CreateFailed";
  readonly CREATE_IN_PROGRESS: "CreateInProgress";
  readonly DELETE_COMPLETED: "DeleteCompleted";
  readonly DELETE_FAILED: "DeleteFailed";
  readonly DELETE_IN_PROGRESS: "DeleteInProgress";
  readonly PENDING: "Pending";
  readonly UPDATE_COMPLETED: "UpdateCompleted";
  readonly UPDATE_FAILED: "UpdateFailed";
  readonly UPDATE_IN_PROGRESS: "UpdateInProgress";
};
export type ProjectStatus = (typeof ProjectStatus)[keyof typeof ProjectStatus];
export interface ServiceCatalogProvisionedProductDetails {
  ProvisionedProductId?: string;
  ProvisionedProductStatusMessage?: string;
}
export interface DescribeProjectOutput {
  ProjectArn: string | undefined;
  ProjectName: string | undefined;
  ProjectId: string | undefined;
  ProjectDescription?: string;
  ServiceCatalogProvisioningDetails:
    | ServiceCatalogProvisioningDetails
    | undefined;
  ServiceCatalogProvisionedProductDetails?: ServiceCatalogProvisionedProductDetails;
  ProjectStatus: ProjectStatus | undefined;
  CreatedBy?: UserContext;
  CreationTime: Date | undefined;
  LastModifiedTime?: Date;
  LastModifiedBy?: UserContext;
}
export interface DescribeSpaceRequest {
  DomainId: string | undefined;
  SpaceName: string | undefined;
}
export declare const SpaceStatus: {
  readonly Delete_Failed: "Delete_Failed";
  readonly Deleting: "Deleting";
  readonly Failed: "Failed";
  readonly InService: "InService";
  readonly Pending: "Pending";
  readonly Update_Failed: "Update_Failed";
  readonly Updating: "Updating";
};
export type SpaceStatus = (typeof SpaceStatus)[keyof typeof SpaceStatus];
export interface DescribeSpaceResponse {
  DomainId?: string;
  SpaceArn?: string;
  SpaceName?: string;
  HomeEfsFileSystemUid?: string;
  Status?: SpaceStatus;
  LastModifiedTime?: Date;
  CreationTime?: Date;
  FailureReason?: string;
  SpaceSettings?: SpaceSettings;
  OwnershipSettings?: OwnershipSettings;
  SpaceSharingSettings?: SpaceSharingSettings;
  SpaceDisplayName?: string;
  Url?: string;
}
export interface DescribeStudioLifecycleConfigRequest {
  StudioLifecycleConfigName: string | undefined;
}
export interface DescribeStudioLifecycleConfigResponse {
  StudioLifecycleConfigArn?: string;
  StudioLifecycleConfigName?: string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  StudioLifecycleConfigContent?: string;
  StudioLifecycleConfigAppType?: StudioLifecycleConfigAppType;
}
export interface DescribeSubscribedWorkteamRequest {
  WorkteamArn: string | undefined;
}
export interface SubscribedWorkteam {
  WorkteamArn: string | undefined;
  MarketplaceTitle?: string;
  SellerName?: string;
  MarketplaceDescription?: string;
  ListingId?: string;
}
export interface DescribeSubscribedWorkteamResponse {
  SubscribedWorkteam: SubscribedWorkteam | undefined;
}
export interface DescribeTrainingJobRequest {
  TrainingJobName: string | undefined;
}
export interface MetricData {
  MetricName?: string;
  Value?: number;
  Timestamp?: Date;
}
export interface ProfilerRuleEvaluationStatus {
  RuleConfigurationName?: string;
  RuleEvaluationJobArn?: string;
  RuleEvaluationStatus?: RuleEvaluationStatus;
  StatusDetails?: string;
  LastModifiedTime?: Date;
}
export declare const ProfilingStatus: {
  readonly DISABLED: "Disabled";
  readonly ENABLED: "Enabled";
};
export type ProfilingStatus =
  (typeof ProfilingStatus)[keyof typeof ProfilingStatus];
export declare const SecondaryStatus: {
  readonly COMPLETED: "Completed";
  readonly DOWNLOADING: "Downloading";
  readonly DOWNLOADING_TRAINING_IMAGE: "DownloadingTrainingImage";
  readonly FAILED: "Failed";
  readonly INTERRUPTED: "Interrupted";
  readonly LAUNCHING_ML_INSTANCES: "LaunchingMLInstances";
  readonly MAX_RUNTIME_EXCEEDED: "MaxRuntimeExceeded";
  readonly MAX_WAIT_TIME_EXCEEDED: "MaxWaitTimeExceeded";
  readonly PENDING: "Pending";
  readonly PREPARING_TRAINING_STACK: "PreparingTrainingStack";
  readonly RESTARTING: "Restarting";
  readonly STARTING: "Starting";
  readonly STOPPED: "Stopped";
  readonly STOPPING: "Stopping";
  readonly TRAINING: "Training";
  readonly UPDATING: "Updating";
  readonly UPLOADING: "Uploading";
};
export type SecondaryStatus =
  (typeof SecondaryStatus)[keyof typeof SecondaryStatus];
export interface SecondaryStatusTransition {
  Status: SecondaryStatus | undefined;
  StartTime: Date | undefined;
  EndTime?: Date;
  StatusMessage?: string;
}
export declare const WarmPoolResourceStatus: {
  readonly AVAILABLE: "Available";
  readonly INUSE: "InUse";
  readonly REUSED: "Reused";
  readonly TERMINATED: "Terminated";
};
export type WarmPoolResourceStatus =
  (typeof WarmPoolResourceStatus)[keyof typeof WarmPoolResourceStatus];
export interface WarmPoolStatus {
  Status: WarmPoolResourceStatus | undefined;
  ResourceRetainedBillableTimeInSeconds?: number;
  ReusedByJob?: string;
}
export interface DescribeTrainingJobResponse {
  TrainingJobName: string | undefined;
  TrainingJobArn: string | undefined;
  TuningJobArn?: string;
  LabelingJobArn?: string;
  AutoMLJobArn?: string;
  ModelArtifacts: ModelArtifacts | undefined;
  TrainingJobStatus: TrainingJobStatus | undefined;
  SecondaryStatus: SecondaryStatus | undefined;
  FailureReason?: string;
  HyperParameters?: Record<string, string>;
  AlgorithmSpecification: AlgorithmSpecification | undefined;
  RoleArn?: string;
  InputDataConfig?: Channel[];
  OutputDataConfig?: OutputDataConfig;
  ResourceConfig: ResourceConfig | undefined;
  WarmPoolStatus?: WarmPoolStatus;
  VpcConfig?: VpcConfig;
  StoppingCondition: StoppingCondition | undefined;
  CreationTime: Date | undefined;
  TrainingStartTime?: Date;
  TrainingEndTime?: Date;
  LastModifiedTime?: Date;
  SecondaryStatusTransitions?: SecondaryStatusTransition[];
  FinalMetricDataList?: MetricData[];
  EnableNetworkIsolation?: boolean;
  EnableInterContainerTrafficEncryption?: boolean;
  EnableManagedSpotTraining?: boolean;
  CheckpointConfig?: CheckpointConfig;
  TrainingTimeInSeconds?: number;
  BillableTimeInSeconds?: number;
  DebugHookConfig?: DebugHookConfig;
  ExperimentConfig?: ExperimentConfig;
  DebugRuleConfigurations?: DebugRuleConfiguration[];
  TensorBoardOutputConfig?: TensorBoardOutputConfig;
  DebugRuleEvaluationStatuses?: DebugRuleEvaluationStatus[];
  ProfilerConfig?: ProfilerConfig;
  ProfilerRuleConfigurations?: ProfilerRuleConfiguration[];
  ProfilerRuleEvaluationStatuses?: ProfilerRuleEvaluationStatus[];
  ProfilingStatus?: ProfilingStatus;
  Environment?: Record<string, string>;
  RetryStrategy?: RetryStrategy;
  RemoteDebugConfig?: RemoteDebugConfig;
  InfraCheckConfig?: InfraCheckConfig;
}
export interface DescribeTransformJobRequest {
  TransformJobName: string | undefined;
}
export declare const TransformJobStatus: {
  readonly COMPLETED: "Completed";
  readonly FAILED: "Failed";
  readonly IN_PROGRESS: "InProgress";
  readonly STOPPED: "Stopped";
  readonly STOPPING: "Stopping";
};
export type TransformJobStatus =
  (typeof TransformJobStatus)[keyof typeof TransformJobStatus];
export interface DescribeTransformJobResponse {
  TransformJobName: string | undefined;
  TransformJobArn: string | undefined;
  TransformJobStatus: TransformJobStatus | undefined;
  FailureReason?: string;
  ModelName: string | undefined;
  MaxConcurrentTransforms?: number;
  ModelClientConfig?: ModelClientConfig;
  MaxPayloadInMB?: number;
  BatchStrategy?: BatchStrategy;
  Environment?: Record<string, string>;
  TransformInput: TransformInput | undefined;
  TransformOutput?: TransformOutput;
  DataCaptureConfig?: BatchDataCaptureConfig;
  TransformResources: TransformResources | undefined;
  CreationTime: Date | undefined;
  TransformStartTime?: Date;
  TransformEndTime?: Date;
  LabelingJobArn?: string;
  AutoMLJobArn?: string;
  DataProcessing?: DataProcessing;
  ExperimentConfig?: ExperimentConfig;
}
export interface DescribeTrialRequest {
  TrialName: string | undefined;
}
export interface TrialSource {
  SourceArn: string | undefined;
  SourceType?: string;
}
export interface DescribeTrialResponse {
  TrialName?: string;
  TrialArn?: string;
  DisplayName?: string;
  ExperimentName?: string;
  Source?: TrialSource;
  CreationTime?: Date;
  CreatedBy?: UserContext;
  LastModifiedTime?: Date;
  LastModifiedBy?: UserContext;
  MetadataProperties?: MetadataProperties;
}
export interface DescribeTrialComponentRequest {
  TrialComponentName: string | undefined;
}
export interface TrialComponentMetricSummary {
  MetricName?: string;
  SourceArn?: string;
  TimeStamp?: Date;
  Max?: number;
  Min?: number;
  Last?: number;
  Count?: number;
  Avg?: number;
  StdDev?: number;
}
export interface TrialComponentSource {
  SourceArn: string | undefined;
  SourceType?: string;
}
export interface DescribeTrialComponentResponse {
  TrialComponentName?: string;
  TrialComponentArn?: string;
  DisplayName?: string;
  Source?: TrialComponentSource;
  Status?: TrialComponentStatus;
  StartTime?: Date;
  EndTime?: Date;
  CreationTime?: Date;
  CreatedBy?: UserContext;
  LastModifiedTime?: Date;
  LastModifiedBy?: UserContext;
  Parameters?: Record<string, TrialComponentParameterValue>;
  InputArtifacts?: Record<string, TrialComponentArtifact>;
  OutputArtifacts?: Record<string, TrialComponentArtifact>;
  MetadataProperties?: MetadataProperties;
  Metrics?: TrialComponentMetricSummary[];
  LineageGroupArn?: string;
  Sources?: TrialComponentSource[];
}
export interface DescribeUserProfileRequest {
  DomainId: string | undefined;
  UserProfileName: string | undefined;
}
export declare const UserProfileStatus: {
  readonly Delete_Failed: "Delete_Failed";
  readonly Deleting: "Deleting";
  readonly Failed: "Failed";
  readonly InService: "InService";
  readonly Pending: "Pending";
  readonly Update_Failed: "Update_Failed";
  readonly Updating: "Updating";
};
export type UserProfileStatus =
  (typeof UserProfileStatus)[keyof typeof UserProfileStatus];
export interface DescribeUserProfileResponse {
  DomainId?: string;
  UserProfileArn?: string;
  UserProfileName?: string;
  HomeEfsFileSystemUid?: string;
  Status?: UserProfileStatus;
  LastModifiedTime?: Date;
  CreationTime?: Date;
  FailureReason?: string;
  SingleSignOnUserIdentifier?: string;
  SingleSignOnUserValue?: string;
  UserSettings?: UserSettings;
}
export interface DescribeWorkforceRequest {
  WorkforceName: string | undefined;
}
export interface OidcConfigForResponse {
  ClientId?: string;
  Issuer?: string;
  AuthorizationEndpoint?: string;
  TokenEndpoint?: string;
  UserInfoEndpoint?: string;
  LogoutEndpoint?: string;
  JwksUri?: string;
  Scope?: string;
  AuthenticationRequestExtraParams?: Record<string, string>;
}
export declare const WorkforceStatus: {
  readonly ACTIVE: "Active";
  readonly DELETING: "Deleting";
  readonly FAILED: "Failed";
  readonly INITIALIZING: "Initializing";
  readonly UPDATING: "Updating";
};
export type WorkforceStatus =
  (typeof WorkforceStatus)[keyof typeof WorkforceStatus];
export interface WorkforceVpcConfigResponse {
  VpcId: string | undefined;
  SecurityGroupIds: string[] | undefined;
  Subnets: string[] | undefined;
  VpcEndpointId?: string;
}
export interface Workforce {
  WorkforceName: string | undefined;
  WorkforceArn: string | undefined;
  LastUpdatedDate?: Date;
  SourceIpConfig?: SourceIpConfig;
  SubDomain?: string;
  CognitoConfig?: CognitoConfig;
  OidcConfig?: OidcConfigForResponse;
  CreateDate?: Date;
  WorkforceVpcConfig?: WorkforceVpcConfigResponse;
  Status?: WorkforceStatus;
  FailureReason?: string;
}
export interface DescribeWorkforceResponse {
  Workforce: Workforce | undefined;
}
export interface DescribeWorkteamRequest {
  WorkteamName: string | undefined;
}
export interface Workteam {
  WorkteamName: string | undefined;
  MemberDefinitions: MemberDefinition[] | undefined;
  WorkteamArn: string | undefined;
  WorkforceArn?: string;
  ProductListingIds?: string[];
  Description: string | undefined;
  SubDomain?: string;
  CreateDate?: Date;
  LastUpdatedDate?: Date;
  NotificationConfiguration?: NotificationConfiguration;
  WorkerAccessConfiguration?: WorkerAccessConfiguration;
}
export interface DescribeWorkteamResponse {
  Workteam: Workteam | undefined;
}
export interface ProductionVariantServerlessUpdateConfig {
  MaxConcurrency?: number;
  ProvisionedConcurrency?: number;
}
export interface DesiredWeightAndCapacity {
  VariantName: string | undefined;
  DesiredWeight?: number;
  DesiredInstanceCount?: number;
  ServerlessUpdateConfig?: ProductionVariantServerlessUpdateConfig;
}
export interface Device {
  DeviceName: string | undefined;
  Description?: string;
  IotThingName?: string;
}
export declare const DeviceDeploymentStatus: {
  readonly Deployed: "DEPLOYED";
  readonly Failed: "FAILED";
  readonly InProgress: "INPROGRESS";
  readonly ReadyToDeploy: "READYTODEPLOY";
  readonly Stopped: "STOPPED";
  readonly Stopping: "STOPPING";
};
export type DeviceDeploymentStatus =
  (typeof DeviceDeploymentStatus)[keyof typeof DeviceDeploymentStatus];
export interface DeviceDeploymentSummary {
  EdgeDeploymentPlanArn: string | undefined;
  EdgeDeploymentPlanName: string | undefined;
  StageName: string | undefined;
  DeployedStageName?: string;
  DeviceFleetName?: string;
  DeviceName: string | undefined;
  DeviceArn: string | undefined;
  DeviceDeploymentStatus?: DeviceDeploymentStatus;
  DeviceDeploymentStatusMessage?: string;
  Description?: string;
  DeploymentStartTime?: Date;
}
export interface DeviceFleetSummary {
  DeviceFleetArn: string | undefined;
  DeviceFleetName: string | undefined;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export interface DeviceStats {
  ConnectedDeviceCount: number | undefined;
  RegisteredDeviceCount: number | undefined;
}
export interface EdgeModelSummary {
  ModelName: string | undefined;
  ModelVersion: string | undefined;
}
export interface DeviceSummary {
  DeviceName: string | undefined;
  DeviceArn: string | undefined;
  Description?: string;
  DeviceFleetName?: string;
  IotThingName?: string;
  RegistrationTime?: Date;
  LatestHeartbeat?: Date;
  Models?: EdgeModelSummary[];
  AgentVersion?: string;
}
export declare const Direction: {
  readonly ASCENDANTS: "Ascendants";
  readonly BOTH: "Both";
  readonly DESCENDANTS: "Descendants";
};
export type Direction = (typeof Direction)[keyof typeof Direction];
export interface DisableSagemakerServicecatalogPortfolioInput {}
export interface DisableSagemakerServicecatalogPortfolioOutput {}
export interface DisassociateTrialComponentRequest {
  TrialComponentName: string | undefined;
  TrialName: string | undefined;
}
export interface DisassociateTrialComponentResponse {
  TrialComponentArn?: string;
  TrialArn?: string;
}
export interface DomainDetails {
  DomainArn?: string;
  DomainId?: string;
  DomainName?: string;
  Status?: DomainStatus;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  Url?: string;
}
export interface RStudioServerProDomainSettingsForUpdate {
  DomainExecutionRoleArn: string | undefined;
  DefaultResourceSpec?: ResourceSpec;
  RStudioConnectUrl?: string;
  RStudioPackageManagerUrl?: string;
}
export interface DomainSettingsForUpdate {
  RStudioServerProDomainSettingsForUpdate?: RStudioServerProDomainSettingsForUpdate;
  ExecutionRoleIdentityConfig?: ExecutionRoleIdentityConfig;
  SecurityGroupIds?: string[];
  DockerSettings?: DockerSettings;
  AmazonQSettings?: AmazonQSettings;
}
export interface PredefinedMetricSpecification {
  PredefinedMetricType?: string;
}
export type MetricSpecification =
  | MetricSpecification.CustomizedMember
  | MetricSpecification.PredefinedMember
  | MetricSpecification.$UnknownMember;
export declare namespace MetricSpecification {
  interface PredefinedMember {
    Predefined: PredefinedMetricSpecification;
    Customized?: never;
    $unknown?: never;
  }
  interface CustomizedMember {
    Predefined?: never;
    Customized: CustomizedMetricSpecification;
    $unknown?: never;
  }
  interface $UnknownMember {
    Predefined?: never;
    Customized?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    Predefined: (value: PredefinedMetricSpecification) => T;
    Customized: (value: CustomizedMetricSpecification) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: MetricSpecification, visitor: Visitor<T>) => T;
}
export interface TargetTrackingScalingPolicyConfiguration {
  MetricSpecification?: MetricSpecification;
  TargetValue?: number;
}
export type ScalingPolicy =
  | ScalingPolicy.TargetTrackingMember
  | ScalingPolicy.$UnknownMember;
export declare namespace ScalingPolicy {
  interface TargetTrackingMember {
    TargetTracking: TargetTrackingScalingPolicyConfiguration;
    $unknown?: never;
  }
  interface $UnknownMember {
    TargetTracking?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    TargetTracking: (value: TargetTrackingScalingPolicyConfiguration) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: ScalingPolicy, visitor: Visitor<T>) => T;
}
export interface DynamicScalingConfiguration {
  MinCapacity?: number;
  MaxCapacity?: number;
  ScaleInCooldown?: number;
  ScaleOutCooldown?: number;
  ScalingPolicies?: ScalingPolicy[];
}
export interface Edge {
  SourceArn?: string;
  DestinationArn?: string;
  AssociationType?: AssociationEdgeType;
}
export interface EdgeDeploymentPlanSummary {
  EdgeDeploymentPlanArn: string | undefined;
  EdgeDeploymentPlanName: string | undefined;
  DeviceFleetName: string | undefined;
  EdgeDeploymentSuccess: number | undefined;
  EdgeDeploymentPending: number | undefined;
  EdgeDeploymentFailed: number | undefined;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export interface EdgeModelStat {
  ModelName: string | undefined;
  ModelVersion: string | undefined;
  OfflineDeviceCount: number | undefined;
  ConnectedDeviceCount: number | undefined;
  ActiveDeviceCount: number | undefined;
  SamplingDeviceCount: number | undefined;
}
export interface EdgePackagingJobSummary {
  EdgePackagingJobArn: string | undefined;
  EdgePackagingJobName: string | undefined;
  EdgePackagingJobStatus: EdgePackagingJobStatus | undefined;
  CompilationJobName?: string;
  ModelName?: string;
  ModelVersion?: string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export interface EMRStepMetadata {
  ClusterId?: string;
  StepId?: string;
  StepName?: string;
  LogFilePath?: string;
}
export interface EnableSagemakerServicecatalogPortfolioInput {}
export interface EnableSagemakerServicecatalogPortfolioOutput {}
export interface MonitoringSchedule {
  MonitoringScheduleArn?: string;
  MonitoringScheduleName?: string;
  MonitoringScheduleStatus?: ScheduleStatus;
  MonitoringType?: MonitoringType;
  FailureReason?: string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  MonitoringScheduleConfig?: MonitoringScheduleConfig;
  EndpointName?: string;
  LastMonitoringExecutionSummary?: MonitoringExecutionSummary;
  Tags?: Tag[];
}
export interface Endpoint {
  EndpointName: string | undefined;
  EndpointArn: string | undefined;
  EndpointConfigName: string | undefined;
  ProductionVariants?: ProductionVariantSummary[];
  DataCaptureConfig?: DataCaptureConfigSummary;
  EndpointStatus: EndpointStatus | undefined;
  FailureReason?: string;
  CreationTime: Date | undefined;
  LastModifiedTime: Date | undefined;
  MonitoringSchedules?: MonitoringSchedule[];
  Tags?: Tag[];
  ShadowProductionVariants?: ProductionVariantSummary[];
}
export declare const EndpointConfigSortKey: {
  readonly CreationTime: "CreationTime";
  readonly Name: "Name";
};
export type EndpointConfigSortKey =
  (typeof EndpointConfigSortKey)[keyof typeof EndpointConfigSortKey];
export interface EndpointConfigStepMetadata {
  Arn?: string;
}
export interface EndpointConfigSummary {
  EndpointConfigName: string | undefined;
  EndpointConfigArn: string | undefined;
  CreationTime: Date | undefined;
}
export declare const EndpointSortKey: {
  readonly CreationTime: "CreationTime";
  readonly Name: "Name";
  readonly Status: "Status";
};
export type EndpointSortKey =
  (typeof EndpointSortKey)[keyof typeof EndpointSortKey];
export interface EndpointStepMetadata {
  Arn?: string;
}
export interface EndpointSummary {
  EndpointName: string | undefined;
  EndpointArn: string | undefined;
  CreationTime: Date | undefined;
  LastModifiedTime: Date | undefined;
  EndpointStatus: EndpointStatus | undefined;
}
export interface Experiment {
  ExperimentName?: string;
  ExperimentArn?: string;
  DisplayName?: string;
  Source?: ExperimentSource;
  Description?: string;
  CreationTime?: Date;
  CreatedBy?: UserContext;
  LastModifiedTime?: Date;
  LastModifiedBy?: UserContext;
  Tags?: Tag[];
}
export interface ExperimentSummary {
  ExperimentArn?: string;
  ExperimentName?: string;
  DisplayName?: string;
  ExperimentSource?: ExperimentSource;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export interface FailStepMetadata {
  ErrorMessage?: string;
}
export interface FeatureGroup {
  FeatureGroupArn?: string;
  FeatureGroupName?: string;
  RecordIdentifierFeatureName?: string;
  EventTimeFeatureName?: string;
  FeatureDefinitions?: FeatureDefinition[];
  CreationTime?: Date;
  LastModifiedTime?: Date;
  OnlineStoreConfig?: OnlineStoreConfig;
  OfflineStoreConfig?: OfflineStoreConfig;
  RoleArn?: string;
  FeatureGroupStatus?: FeatureGroupStatus;
  OfflineStoreStatus?: OfflineStoreStatus;
  LastUpdateStatus?: LastUpdateStatus;
  FailureReason?: string;
  Description?: string;
  Tags?: Tag[];
}
export declare const FeatureGroupSortBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly FEATURE_GROUP_STATUS: "FeatureGroupStatus";
  readonly NAME: "Name";
  readonly OFFLINE_STORE_STATUS: "OfflineStoreStatus";
};
export type FeatureGroupSortBy =
  (typeof FeatureGroupSortBy)[keyof typeof FeatureGroupSortBy];
export declare const FeatureGroupSortOrder: {
  readonly ASCENDING: "Ascending";
  readonly DESCENDING: "Descending";
};
export type FeatureGroupSortOrder =
  (typeof FeatureGroupSortOrder)[keyof typeof FeatureGroupSortOrder];
export interface FeatureGroupSummary {
  FeatureGroupName: string | undefined;
  FeatureGroupArn: string | undefined;
  CreationTime: Date | undefined;
  FeatureGroupStatus?: FeatureGroupStatus;
  OfflineStoreStatus?: OfflineStoreStatus;
}
export interface FeatureMetadata {
  FeatureGroupArn?: string;
  FeatureGroupName?: string;
  FeatureName?: string;
  FeatureType?: FeatureType;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  Description?: string;
  Parameters?: FeatureParameter[];
}
export declare const Operator: {
  readonly CONTAINS: "Contains";
  readonly EQUALS: "Equals";
  readonly EXISTS: "Exists";
  readonly GREATER_THAN: "GreaterThan";
  readonly GREATER_THAN_OR_EQUAL_TO: "GreaterThanOrEqualTo";
  readonly IN: "In";
  readonly LESS_THAN: "LessThan";
  readonly LESS_THAN_OR_EQUAL_TO: "LessThanOrEqualTo";
  readonly NOT_EQUALS: "NotEquals";
  readonly NOT_EXISTS: "NotExists";
};
export type Operator = (typeof Operator)[keyof typeof Operator];
export interface Filter {
  Name: string | undefined;
  Operator?: Operator;
  Value?: string;
}
export interface FlowDefinitionSummary {
  FlowDefinitionName: string | undefined;
  FlowDefinitionArn: string | undefined;
  FlowDefinitionStatus: FlowDefinitionStatus | undefined;
  CreationTime: Date | undefined;
  FailureReason?: string;
}
export interface GetDeviceFleetReportRequest {
  DeviceFleetName: string | undefined;
}
export interface GetDeviceFleetReportResponse {
  DeviceFleetArn: string | undefined;
  DeviceFleetName: string | undefined;
  OutputConfig?: EdgeOutputConfig;
  Description?: string;
  ReportGenerated?: Date;
  DeviceStats?: DeviceStats;
  AgentVersions?: AgentVersion[];
  ModelStats?: EdgeModelStat[];
}
export interface GetLineageGroupPolicyRequest {
  LineageGroupName: string | undefined;
}
export interface GetLineageGroupPolicyResponse {
  LineageGroupArn?: string;
  ResourcePolicy?: string;
}
export interface GetModelPackageGroupPolicyInput {
  ModelPackageGroupName: string | undefined;
}
export interface GetModelPackageGroupPolicyOutput {
  ResourcePolicy: string | undefined;
}
export interface GetSagemakerServicecatalogPortfolioStatusInput {}
export declare const SagemakerServicecatalogStatus: {
  readonly DISABLED: "Disabled";
  readonly ENABLED: "Enabled";
};
export type SagemakerServicecatalogStatus =
  (typeof SagemakerServicecatalogStatus)[keyof typeof SagemakerServicecatalogStatus];
export interface GetSagemakerServicecatalogPortfolioStatusOutput {
  Status?: SagemakerServicecatalogStatus;
}
export interface ScalingPolicyObjective {
  MinInvocationsPerMinute?: number;
  MaxInvocationsPerMinute?: number;
}
export interface GetScalingConfigurationRecommendationRequest {
  InferenceRecommendationsJobName: string | undefined;
  RecommendationId?: string;
  EndpointName?: string;
  TargetCpuUtilizationPerCore?: number;
  ScalingPolicyObjective?: ScalingPolicyObjective;
}
export interface ScalingPolicyMetric {
  InvocationsPerInstance?: number;
  ModelLatency?: number;
}
export interface GetScalingConfigurationRecommendationResponse {
  InferenceRecommendationsJobName?: string;
  RecommendationId?: string;
  EndpointName?: string;
  TargetCpuUtilizationPerCore?: number;
  ScalingPolicyObjective?: ScalingPolicyObjective;
  Metric?: ScalingPolicyMetric;
  DynamicScalingConfiguration?: DynamicScalingConfiguration;
}
export declare const ResourceType: {
  readonly ENDPOINT: "Endpoint";
  readonly EXPERIMENT: "Experiment";
  readonly EXPERIMENT_TRIAL: "ExperimentTrial";
  readonly EXPERIMENT_TRIAL_COMPONENT: "ExperimentTrialComponent";
  readonly FEATURE_GROUP: "FeatureGroup";
  readonly FEATURE_METADATA: "FeatureMetadata";
  readonly HYPER_PARAMETER_TUNING_JOB: "HyperParameterTuningJob";
  readonly IMAGE: "Image";
  readonly IMAGE_VERSION: "ImageVersion";
  readonly MODEL: "Model";
  readonly MODEL_CARD: "ModelCard";
  readonly MODEL_PACKAGE: "ModelPackage";
  readonly MODEL_PACKAGE_GROUP: "ModelPackageGroup";
  readonly PIPELINE: "Pipeline";
  readonly PIPELINE_EXECUTION: "PipelineExecution";
  readonly PROJECT: "Project";
  readonly TRAINING_JOB: "TrainingJob";
};
export type ResourceType = (typeof ResourceType)[keyof typeof ResourceType];
export interface PropertyNameQuery {
  PropertyNameHint: string | undefined;
}
export interface SuggestionQuery {
  PropertyNameQuery?: PropertyNameQuery;
}
export interface GetSearchSuggestionsRequest {
  Resource: ResourceType | undefined;
  SuggestionQuery?: SuggestionQuery;
}
export interface PropertyNameSuggestion {
  PropertyName?: string;
}
export interface GetSearchSuggestionsResponse {
  PropertyNameSuggestions?: PropertyNameSuggestion[];
}
export interface GitConfigForUpdate {
  SecretArn?: string;
}
export interface HubContentInfo {
  HubContentName: string | undefined;
  HubContentArn: string | undefined;
  SageMakerPublicHubContentArn?: string;
  HubContentVersion: string | undefined;
  HubContentType: HubContentType | undefined;
  DocumentSchemaVersion: string | undefined;
  HubContentDisplayName?: string;
  HubContentDescription?: string;
  SupportStatus?: HubContentSupportStatus;
  HubContentSearchKeywords?: string[];
  HubContentStatus: HubContentStatus | undefined;
  CreationTime: Date | undefined;
  OriginalCreationTime?: Date;
}
export declare const HubContentSortBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly HUB_CONTENT_NAME: "HubContentName";
  readonly HUB_CONTENT_STATUS: "HubContentStatus";
};
export type HubContentSortBy =
  (typeof HubContentSortBy)[keyof typeof HubContentSortBy];
export interface HubInfo {
  HubName: string | undefined;
  HubArn: string | undefined;
  HubDisplayName?: string;
  HubDescription?: string;
  HubSearchKeywords?: string[];
  HubStatus: HubStatus | undefined;
  CreationTime: Date | undefined;
  LastModifiedTime: Date | undefined;
}
export declare const HubSortBy: {
  readonly ACCOUNT_ID_OWNER: "AccountIdOwner";
  readonly CREATION_TIME: "CreationTime";
  readonly HUB_NAME: "HubName";
  readonly HUB_STATUS: "HubStatus";
};
export type HubSortBy = (typeof HubSortBy)[keyof typeof HubSortBy];
export interface HumanTaskUiSummary {
  HumanTaskUiName: string | undefined;
  HumanTaskUiArn: string | undefined;
  CreationTime: Date | undefined;
}
export interface HyperParameterTuningJobSearchEntity {
  HyperParameterTuningJobName?: string;
  HyperParameterTuningJobArn?: string;
  HyperParameterTuningJobConfig?: HyperParameterTuningJobConfig;
  TrainingJobDefinition?: HyperParameterTrainingJobDefinition;
  TrainingJobDefinitions?: HyperParameterTrainingJobDefinition[];
  HyperParameterTuningJobStatus?: HyperParameterTuningJobStatus;
  CreationTime?: Date;
  HyperParameterTuningEndTime?: Date;
  LastModifiedTime?: Date;
  TrainingJobStatusCounters?: TrainingJobStatusCounters;
  ObjectiveStatusCounters?: ObjectiveStatusCounters;
  BestTrainingJob?: HyperParameterTrainingJobSummary;
  OverallBestTrainingJob?: HyperParameterTrainingJobSummary;
  WarmStartConfig?: HyperParameterTuningJobWarmStartConfig;
  FailureReason?: string;
  TuningJobCompletionDetails?: HyperParameterTuningJobCompletionDetails;
  ConsumedResources?: HyperParameterTuningJobConsumedResources;
  Tags?: Tag[];
}
export declare const HyperParameterTuningJobSortByOptions: {
  readonly CreationTime: "CreationTime";
  readonly Name: "Name";
  readonly Status: "Status";
};
export type HyperParameterTuningJobSortByOptions =
  (typeof HyperParameterTuningJobSortByOptions)[keyof typeof HyperParameterTuningJobSortByOptions];
export interface HyperParameterTuningJobSummary {
  HyperParameterTuningJobName: string | undefined;
  HyperParameterTuningJobArn: string | undefined;
  HyperParameterTuningJobStatus: HyperParameterTuningJobStatus | undefined;
  Strategy: HyperParameterTuningJobStrategyType | undefined;
  CreationTime: Date | undefined;
  HyperParameterTuningEndTime?: Date;
  LastModifiedTime?: Date;
  TrainingJobStatusCounters: TrainingJobStatusCounters | undefined;
  ObjectiveStatusCounters: ObjectiveStatusCounters | undefined;
  ResourceLimits?: ResourceLimits;
}
export interface Image {
  CreationTime: Date | undefined;
  Description?: string;
  DisplayName?: string;
  FailureReason?: string;
  ImageArn: string | undefined;
  ImageName: string | undefined;
  ImageStatus: ImageStatus | undefined;
  LastModifiedTime: Date | undefined;
}
export declare const ImageSortBy: {
  readonly CREATION_TIME: "CREATION_TIME";
  readonly IMAGE_NAME: "IMAGE_NAME";
  readonly LAST_MODIFIED_TIME: "LAST_MODIFIED_TIME";
};
export type ImageSortBy = (typeof ImageSortBy)[keyof typeof ImageSortBy];
export declare const ImageSortOrder: {
  readonly ASCENDING: "ASCENDING";
  readonly DESCENDING: "DESCENDING";
};
export type ImageSortOrder =
  (typeof ImageSortOrder)[keyof typeof ImageSortOrder];
export interface ImageVersion {
  CreationTime: Date | undefined;
  FailureReason?: string;
  ImageArn: string | undefined;
  ImageVersionArn: string | undefined;
  ImageVersionStatus: ImageVersionStatus | undefined;
  LastModifiedTime: Date | undefined;
  Version: number | undefined;
}
export declare const ImageVersionSortBy: {
  readonly CREATION_TIME: "CREATION_TIME";
  readonly LAST_MODIFIED_TIME: "LAST_MODIFIED_TIME";
  readonly VERSION: "VERSION";
};
export type ImageVersionSortBy =
  (typeof ImageVersionSortBy)[keyof typeof ImageVersionSortBy];
export declare const ImageVersionSortOrder: {
  readonly ASCENDING: "ASCENDING";
  readonly DESCENDING: "DESCENDING";
};
export type ImageVersionSortOrder =
  (typeof ImageVersionSortOrder)[keyof typeof ImageVersionSortOrder];
export interface ImportHubContentRequest {
  HubContentName: string | undefined;
  HubContentVersion?: string;
  HubContentType: HubContentType | undefined;
  DocumentSchemaVersion: string | undefined;
  HubName: string | undefined;
  HubContentDisplayName?: string;
  HubContentDescription?: string;
  HubContentMarkdown?: string;
  HubContentDocument: string | undefined;
  HubContentSearchKeywords?: string[];
  Tags?: Tag[];
}
export interface ImportHubContentResponse {
  HubArn: string | undefined;
  HubContentArn: string | undefined;
}
export declare const InferenceComponentSortKey: {
  readonly CreationTime: "CreationTime";
  readonly Name: "Name";
  readonly Status: "Status";
};
export type InferenceComponentSortKey =
  (typeof InferenceComponentSortKey)[keyof typeof InferenceComponentSortKey];
export interface InferenceComponentSummary {
  CreationTime: Date | undefined;
  InferenceComponentArn: string | undefined;
  InferenceComponentName: string | undefined;
  EndpointArn: string | undefined;
  EndpointName: string | undefined;
  VariantName: string | undefined;
  InferenceComponentStatus?: InferenceComponentStatus;
  LastModifiedTime: Date | undefined;
}
export interface InferenceExperimentSummary {
  Name: string | undefined;
  Type: InferenceExperimentType | undefined;
  Schedule?: InferenceExperimentSchedule;
  Status: InferenceExperimentStatus | undefined;
  StatusReason?: string;
  Description?: string;
  CreationTime: Date | undefined;
  CompletionTime?: Date;
  LastModifiedTime: Date | undefined;
  RoleArn?: string;
}
export declare const InferenceExperimentStopDesiredState: {
  readonly CANCELLED: "Cancelled";
  readonly COMPLETED: "Completed";
};
export type InferenceExperimentStopDesiredState =
  (typeof InferenceExperimentStopDesiredState)[keyof typeof InferenceExperimentStopDesiredState];
export interface InferenceRecommendationsJob {
  JobName: string | undefined;
  JobDescription: string | undefined;
  JobType: RecommendationJobType | undefined;
  JobArn: string | undefined;
  Status: RecommendationJobStatus | undefined;
  CreationTime: Date | undefined;
  CompletionTime?: Date;
  RoleArn: string | undefined;
  LastModifiedTime: Date | undefined;
  FailureReason?: string;
  ModelName?: string;
  SamplePayloadUrl?: string;
  ModelPackageVersionArn?: string;
}
export interface RecommendationJobInferenceBenchmark {
  Metrics?: RecommendationMetrics;
  EndpointMetrics?: InferenceMetrics;
  EndpointConfiguration?: EndpointOutputConfiguration;
  ModelConfiguration: ModelConfiguration | undefined;
  FailureReason?: string;
  InvocationEndTime?: Date;
  InvocationStartTime?: Date;
}
export declare const RecommendationStepType: {
  readonly BENCHMARK: "BENCHMARK";
};
export type RecommendationStepType =
  (typeof RecommendationStepType)[keyof typeof RecommendationStepType];
export interface InferenceRecommendationsJobStep {
  StepType: RecommendationStepType | undefined;
  JobName: string | undefined;
  Status: RecommendationJobStatus | undefined;
  InferenceBenchmark?: RecommendationJobInferenceBenchmark;
}
export interface LabelCountersForWorkteam {
  HumanLabeled?: number;
  PendingHuman?: number;
  Total?: number;
}
export interface LabelingJobForWorkteamSummary {
  LabelingJobName?: string;
  JobReferenceCode: string | undefined;
  WorkRequesterAccountId: string | undefined;
  CreationTime: Date | undefined;
  LabelCounters?: LabelCountersForWorkteam;
  NumberOfHumanWorkersPerDataObject?: number;
}
export interface LabelingJobSummary {
  LabelingJobName: string | undefined;
  LabelingJobArn: string | undefined;
  CreationTime: Date | undefined;
  LastModifiedTime: Date | undefined;
  LabelingJobStatus: LabelingJobStatus | undefined;
  LabelCounters: LabelCounters | undefined;
  WorkteamArn: string | undefined;
  PreHumanTaskLambdaArn: string | undefined;
  AnnotationConsolidationLambdaArn?: string;
  FailureReason?: string;
  LabelingJobOutput?: LabelingJobOutput;
  InputConfig?: LabelingJobInputConfig;
}
export interface LambdaStepMetadata {
  Arn?: string;
  OutputParameters?: OutputParameter[];
}
export interface LineageGroupSummary {
  LineageGroupArn?: string;
  LineageGroupName?: string;
  DisplayName?: string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export declare const LineageType: {
  readonly ACTION: "Action";
  readonly ARTIFACT: "Artifact";
  readonly CONTEXT: "Context";
  readonly TRIAL_COMPONENT: "TrialComponent";
};
export type LineageType = (typeof LineageType)[keyof typeof LineageType];
export declare const SortActionsBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly NAME: "Name";
};
export type SortActionsBy = (typeof SortActionsBy)[keyof typeof SortActionsBy];
export declare const SortOrder: {
  readonly ASCENDING: "Ascending";
  readonly DESCENDING: "Descending";
};
export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder];
export interface ListActionsRequest {
  SourceUri?: string;
  ActionType?: string;
  CreatedAfter?: Date;
  CreatedBefore?: Date;
  SortBy?: SortActionsBy;
  SortOrder?: SortOrder;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListActionsResponse {
  ActionSummaries?: ActionSummary[];
  NextToken?: string;
}
export interface ListAlgorithmsInput {
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  MaxResults?: number;
  NameContains?: string;
  NextToken?: string;
  SortBy?: AlgorithmSortBy;
  SortOrder?: SortOrder;
}
export interface ListAlgorithmsOutput {
  AlgorithmSummaryList: AlgorithmSummary[] | undefined;
  NextToken?: string;
}
export interface ListAliasesRequest {
  ImageName: string | undefined;
  Alias?: string;
  Version?: number;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListAliasesResponse {
  SageMakerImageVersionAliases?: string[];
  NextToken?: string;
}
export interface ListAppImageConfigsRequest {
  MaxResults?: number;
  NextToken?: string;
  NameContains?: string;
  CreationTimeBefore?: Date;
  CreationTimeAfter?: Date;
  ModifiedTimeBefore?: Date;
  ModifiedTimeAfter?: Date;
  SortBy?: AppImageConfigSortKey;
  SortOrder?: SortOrder;
}
export interface ListAppImageConfigsResponse {
  NextToken?: string;
  AppImageConfigs?: AppImageConfigDetails[];
}
export interface ListAppsRequest {
  NextToken?: string;
  MaxResults?: number;
  SortOrder?: SortOrder;
  SortBy?: AppSortKey;
  DomainIdEquals?: string;
  UserProfileNameEquals?: string;
  SpaceNameEquals?: string;
}
export interface ListAppsResponse {
  Apps?: AppDetails[];
  NextToken?: string;
}
export declare const SortArtifactsBy: {
  readonly CREATION_TIME: "CreationTime";
};
export type SortArtifactsBy =
  (typeof SortArtifactsBy)[keyof typeof SortArtifactsBy];
export interface ListArtifactsRequest {
  SourceUri?: string;
  ArtifactType?: string;
  CreatedAfter?: Date;
  CreatedBefore?: Date;
  SortBy?: SortArtifactsBy;
  SortOrder?: SortOrder;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListArtifactsResponse {
  ArtifactSummaries?: ArtifactSummary[];
  NextToken?: string;
}
export declare const SortAssociationsBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly DESTINATION_ARN: "DestinationArn";
  readonly DESTINATION_TYPE: "DestinationType";
  readonly SOURCE_ARN: "SourceArn";
  readonly SOURCE_TYPE: "SourceType";
};
export type SortAssociationsBy =
  (typeof SortAssociationsBy)[keyof typeof SortAssociationsBy];
export interface ListAssociationsRequest {
  SourceArn?: string;
  DestinationArn?: string;
  SourceType?: string;
  DestinationType?: string;
  AssociationType?: AssociationEdgeType;
  CreatedAfter?: Date;
  CreatedBefore?: Date;
  SortBy?: SortAssociationsBy;
  SortOrder?: SortOrder;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListAssociationsResponse {
  AssociationSummaries?: AssociationSummary[];
  NextToken?: string;
}
export interface ListAutoMLJobsRequest {
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  LastModifiedTimeAfter?: Date;
  LastModifiedTimeBefore?: Date;
  NameContains?: string;
  StatusEquals?: AutoMLJobStatus;
  SortOrder?: AutoMLSortOrder;
  SortBy?: AutoMLSortBy;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListAutoMLJobsResponse {
  AutoMLJobSummaries: AutoMLJobSummary[] | undefined;
  NextToken?: string;
}
export interface ListCandidatesForAutoMLJobRequest {
  AutoMLJobName: string | undefined;
  StatusEquals?: CandidateStatus;
  CandidateNameEquals?: string;
  SortOrder?: AutoMLSortOrder;
  SortBy?: CandidateSortBy;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListCandidatesForAutoMLJobResponse {
  Candidates: AutoMLCandidate[] | undefined;
  NextToken?: string;
}
export interface ListClusterNodesRequest {
  ClusterName: string | undefined;
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  InstanceGroupNameContains?: string;
  MaxResults?: number;
  NextToken?: string;
  SortBy?: ClusterSortBy;
  SortOrder?: SortOrder;
}
export interface ListClusterNodesResponse {
  NextToken: string | undefined;
  ClusterNodeSummaries: ClusterNodeSummary[] | undefined;
}
export interface ListClustersRequest {
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  MaxResults?: number;
  NameContains?: string;
  NextToken?: string;
  SortBy?: ClusterSortBy;
  SortOrder?: SortOrder;
}
export interface ListClustersResponse {
  NextToken: string | undefined;
  ClusterSummaries: ClusterSummary[] | undefined;
}
export interface ListCodeRepositoriesInput {
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  LastModifiedTimeAfter?: Date;
  LastModifiedTimeBefore?: Date;
  MaxResults?: number;
  NameContains?: string;
  NextToken?: string;
  SortBy?: CodeRepositorySortBy;
  SortOrder?: CodeRepositorySortOrder;
}
export interface ListCodeRepositoriesOutput {
  CodeRepositorySummaryList: CodeRepositorySummary[] | undefined;
  NextToken?: string;
}
export declare const ListCompilationJobsSortBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly NAME: "Name";
  readonly STATUS: "Status";
};
export type ListCompilationJobsSortBy =
  (typeof ListCompilationJobsSortBy)[keyof typeof ListCompilationJobsSortBy];
export interface ListCompilationJobsRequest {
  NextToken?: string;
  MaxResults?: number;
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  LastModifiedTimeAfter?: Date;
  LastModifiedTimeBefore?: Date;
  NameContains?: string;
  StatusEquals?: CompilationJobStatus;
  SortBy?: ListCompilationJobsSortBy;
  SortOrder?: SortOrder;
}
export interface ListCompilationJobsResponse {
  CompilationJobSummaries: CompilationJobSummary[] | undefined;
  NextToken?: string;
}
export declare const SortContextsBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly NAME: "Name";
};
export type SortContextsBy =
  (typeof SortContextsBy)[keyof typeof SortContextsBy];
export interface ListContextsRequest {
  SourceUri?: string;
  ContextType?: string;
  CreatedAfter?: Date;
  CreatedBefore?: Date;
  SortBy?: SortContextsBy;
  SortOrder?: SortOrder;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListContextsResponse {
  ContextSummaries?: ContextSummary[];
  NextToken?: string;
}
export declare const MonitoringJobDefinitionSortKey: {
  readonly CREATION_TIME: "CreationTime";
  readonly NAME: "Name";
};
export type MonitoringJobDefinitionSortKey =
  (typeof MonitoringJobDefinitionSortKey)[keyof typeof MonitoringJobDefinitionSortKey];
export interface ListDataQualityJobDefinitionsRequest {
  EndpointName?: string;
  SortBy?: MonitoringJobDefinitionSortKey;
  SortOrder?: SortOrder;
  NextToken?: string;
  MaxResults?: number;
  NameContains?: string;
  CreationTimeBefore?: Date;
  CreationTimeAfter?: Date;
}
export interface MonitoringJobDefinitionSummary {
  MonitoringJobDefinitionName: string | undefined;
  MonitoringJobDefinitionArn: string | undefined;
  CreationTime: Date | undefined;
  EndpointName: string | undefined;
}
export interface ListDataQualityJobDefinitionsResponse {
  JobDefinitionSummaries: MonitoringJobDefinitionSummary[] | undefined;
  NextToken?: string;
}
export declare const ListDeviceFleetsSortBy: {
  readonly CreationTime: "CREATION_TIME";
  readonly LastModifiedTime: "LAST_MODIFIED_TIME";
  readonly Name: "NAME";
};
export type ListDeviceFleetsSortBy =
  (typeof ListDeviceFleetsSortBy)[keyof typeof ListDeviceFleetsSortBy];
export interface ListDeviceFleetsRequest {
  NextToken?: string;
  MaxResults?: number;
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  LastModifiedTimeAfter?: Date;
  LastModifiedTimeBefore?: Date;
  NameContains?: string;
  SortBy?: ListDeviceFleetsSortBy;
  SortOrder?: SortOrder;
}
export interface ListDeviceFleetsResponse {
  DeviceFleetSummaries: DeviceFleetSummary[] | undefined;
  NextToken?: string;
}
export interface ListDevicesRequest {
  NextToken?: string;
  MaxResults?: number;
  LatestHeartbeatAfter?: Date;
  ModelName?: string;
  DeviceFleetName?: string;
}
export interface ListDevicesResponse {
  DeviceSummaries: DeviceSummary[] | undefined;
  NextToken?: string;
}
export interface ListDomainsRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface ListDomainsResponse {
  Domains?: DomainDetails[];
  NextToken?: string;
}
export declare const ListEdgeDeploymentPlansSortBy: {
  readonly CreationTime: "CREATION_TIME";
  readonly DeviceFleetName: "DEVICE_FLEET_NAME";
  readonly LastModifiedTime: "LAST_MODIFIED_TIME";
  readonly Name: "NAME";
};
export type ListEdgeDeploymentPlansSortBy =
  (typeof ListEdgeDeploymentPlansSortBy)[keyof typeof ListEdgeDeploymentPlansSortBy];
export interface ListEdgeDeploymentPlansRequest {
  NextToken?: string;
  MaxResults?: number;
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  LastModifiedTimeAfter?: Date;
  LastModifiedTimeBefore?: Date;
  NameContains?: string;
  DeviceFleetNameContains?: string;
  SortBy?: ListEdgeDeploymentPlansSortBy;
  SortOrder?: SortOrder;
}
export interface ListEdgeDeploymentPlansResponse {
  EdgeDeploymentPlanSummaries: EdgeDeploymentPlanSummary[] | undefined;
  NextToken?: string;
}
export declare const ListEdgePackagingJobsSortBy: {
  readonly CreationTime: "CREATION_TIME";
  readonly EdgePackagingJobStatus: "STATUS";
  readonly LastModifiedTime: "LAST_MODIFIED_TIME";
  readonly ModelName: "MODEL_NAME";
  readonly Name: "NAME";
};
export type ListEdgePackagingJobsSortBy =
  (typeof ListEdgePackagingJobsSortBy)[keyof typeof ListEdgePackagingJobsSortBy];
export interface ListEdgePackagingJobsRequest {
  NextToken?: string;
  MaxResults?: number;
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  LastModifiedTimeAfter?: Date;
  LastModifiedTimeBefore?: Date;
  NameContains?: string;
  ModelNameContains?: string;
  StatusEquals?: EdgePackagingJobStatus;
  SortBy?: ListEdgePackagingJobsSortBy;
  SortOrder?: SortOrder;
}
export interface ListEdgePackagingJobsResponse {
  EdgePackagingJobSummaries: EdgePackagingJobSummary[] | undefined;
  NextToken?: string;
}
export declare const OrderKey: {
  readonly Ascending: "Ascending";
  readonly Descending: "Descending";
};
export type OrderKey = (typeof OrderKey)[keyof typeof OrderKey];
export interface ListEndpointConfigsInput {
  SortBy?: EndpointConfigSortKey;
  SortOrder?: OrderKey;
  NextToken?: string;
  MaxResults?: number;
  NameContains?: string;
  CreationTimeBefore?: Date;
  CreationTimeAfter?: Date;
}
export interface ListEndpointConfigsOutput {
  EndpointConfigs: EndpointConfigSummary[] | undefined;
  NextToken?: string;
}
export interface ListEndpointsInput {
  SortBy?: EndpointSortKey;
  SortOrder?: OrderKey;
  NextToken?: string;
  MaxResults?: number;
  NameContains?: string;
  CreationTimeBefore?: Date;
  CreationTimeAfter?: Date;
  LastModifiedTimeBefore?: Date;
  LastModifiedTimeAfter?: Date;
  StatusEquals?: EndpointStatus;
}
export interface ListEndpointsOutput {
  Endpoints: EndpointSummary[] | undefined;
  NextToken?: string;
}
export declare const SortExperimentsBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly NAME: "Name";
};
export type SortExperimentsBy =
  (typeof SortExperimentsBy)[keyof typeof SortExperimentsBy];
export interface ListExperimentsRequest {
  CreatedAfter?: Date;
  CreatedBefore?: Date;
  SortBy?: SortExperimentsBy;
  SortOrder?: SortOrder;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListExperimentsResponse {
  ExperimentSummaries?: ExperimentSummary[];
  NextToken?: string;
}
export interface ListFeatureGroupsRequest {
  NameContains?: string;
  FeatureGroupStatusEquals?: FeatureGroupStatus;
  OfflineStoreStatusEquals?: OfflineStoreStatusValue;
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  SortOrder?: FeatureGroupSortOrder;
  SortBy?: FeatureGroupSortBy;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListFeatureGroupsResponse {
  FeatureGroupSummaries: FeatureGroupSummary[] | undefined;
  NextToken?: string;
}
export interface ListFlowDefinitionsRequest {
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  SortOrder?: SortOrder;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListFlowDefinitionsResponse {
  FlowDefinitionSummaries: FlowDefinitionSummary[] | undefined;
  NextToken?: string;
}
export interface ListHubContentsRequest {
  HubName: string | undefined;
  HubContentType: HubContentType | undefined;
  NameContains?: string;
  MaxSchemaVersion?: string;
  CreationTimeBefore?: Date;
  CreationTimeAfter?: Date;
  SortBy?: HubContentSortBy;
  SortOrder?: SortOrder;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListHubContentsResponse {
  HubContentSummaries: HubContentInfo[] | undefined;
  NextToken?: string;
}
export interface ListHubContentVersionsRequest {
  HubName: string | undefined;
  HubContentType: HubContentType | undefined;
  HubContentName: string | undefined;
  MinVersion?: string;
  MaxSchemaVersion?: string;
  CreationTimeBefore?: Date;
  CreationTimeAfter?: Date;
  SortBy?: HubContentSortBy;
  SortOrder?: SortOrder;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListHubContentVersionsResponse {
  HubContentSummaries: HubContentInfo[] | undefined;
  NextToken?: string;
}
export interface ListHubsRequest {
  NameContains?: string;
  CreationTimeBefore?: Date;
  CreationTimeAfter?: Date;
  LastModifiedTimeBefore?: Date;
  LastModifiedTimeAfter?: Date;
  SortBy?: HubSortBy;
  SortOrder?: SortOrder;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListHubsResponse {
  HubSummaries: HubInfo[] | undefined;
  NextToken?: string;
}
export interface ListHumanTaskUisRequest {
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  SortOrder?: SortOrder;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListHumanTaskUisResponse {
  HumanTaskUiSummaries: HumanTaskUiSummary[] | undefined;
  NextToken?: string;
}
export interface ListHyperParameterTuningJobsRequest {
  NextToken?: string;
  MaxResults?: number;
  SortBy?: HyperParameterTuningJobSortByOptions;
  SortOrder?: SortOrder;
  NameContains?: string;
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  LastModifiedTimeAfter?: Date;
  LastModifiedTimeBefore?: Date;
  StatusEquals?: HyperParameterTuningJobStatus;
}
export interface ListHyperParameterTuningJobsResponse {
  HyperParameterTuningJobSummaries:
    | HyperParameterTuningJobSummary[]
    | undefined;
  NextToken?: string;
}
export interface ListImagesRequest {
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  LastModifiedTimeAfter?: Date;
  LastModifiedTimeBefore?: Date;
  MaxResults?: number;
  NameContains?: string;
  NextToken?: string;
  SortBy?: ImageSortBy;
  SortOrder?: ImageSortOrder;
}
export interface ListImagesResponse {
  Images?: Image[];
  NextToken?: string;
}
export interface ListImageVersionsRequest {
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  ImageName: string | undefined;
  LastModifiedTimeAfter?: Date;
  LastModifiedTimeBefore?: Date;
  MaxResults?: number;
  NextToken?: string;
  SortBy?: ImageVersionSortBy;
  SortOrder?: ImageVersionSortOrder;
}
export interface ListImageVersionsResponse {
  ImageVersions?: ImageVersion[];
  NextToken?: string;
}
export interface ListInferenceComponentsInput {
  SortBy?: InferenceComponentSortKey;
  SortOrder?: OrderKey;
  NextToken?: string;
  MaxResults?: number;
  NameContains?: string;
  CreationTimeBefore?: Date;
  CreationTimeAfter?: Date;
  LastModifiedTimeBefore?: Date;
  LastModifiedTimeAfter?: Date;
  StatusEquals?: InferenceComponentStatus;
  EndpointNameEquals?: string;
  VariantNameEquals?: string;
}
export interface ListInferenceComponentsOutput {
  InferenceComponents: InferenceComponentSummary[] | undefined;
  NextToken?: string;
}
export declare const SortInferenceExperimentsBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly NAME: "Name";
  readonly STATUS: "Status";
};
export type SortInferenceExperimentsBy =
  (typeof SortInferenceExperimentsBy)[keyof typeof SortInferenceExperimentsBy];
export interface ListInferenceExperimentsRequest {
  NameContains?: string;
  Type?: InferenceExperimentType;
  StatusEquals?: InferenceExperimentStatus;
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  LastModifiedTimeAfter?: Date;
  LastModifiedTimeBefore?: Date;
  SortBy?: SortInferenceExperimentsBy;
  SortOrder?: SortOrder;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListInferenceExperimentsResponse {
  InferenceExperiments?: InferenceExperimentSummary[];
  NextToken?: string;
}
export declare const ListInferenceRecommendationsJobsSortBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly NAME: "Name";
  readonly STATUS: "Status";
};
export type ListInferenceRecommendationsJobsSortBy =
  (typeof ListInferenceRecommendationsJobsSortBy)[keyof typeof ListInferenceRecommendationsJobsSortBy];
export interface ListInferenceRecommendationsJobsRequest {
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  LastModifiedTimeAfter?: Date;
  LastModifiedTimeBefore?: Date;
  NameContains?: string;
  StatusEquals?: RecommendationJobStatus;
  SortBy?: ListInferenceRecommendationsJobsSortBy;
  SortOrder?: SortOrder;
  NextToken?: string;
  MaxResults?: number;
  ModelNameEquals?: string;
  ModelPackageVersionArnEquals?: string;
}
export interface ListInferenceRecommendationsJobsResponse {
  InferenceRecommendationsJobs: InferenceRecommendationsJob[] | undefined;
  NextToken?: string;
}
export interface ListInferenceRecommendationsJobStepsRequest {
  JobName: string | undefined;
  Status?: RecommendationJobStatus;
  StepType?: RecommendationStepType;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListInferenceRecommendationsJobStepsResponse {
  Steps?: InferenceRecommendationsJobStep[];
  NextToken?: string;
}
export declare const SortBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly NAME: "Name";
  readonly STATUS: "Status";
};
export type SortBy = (typeof SortBy)[keyof typeof SortBy];
export interface ListLabelingJobsRequest {
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  LastModifiedTimeAfter?: Date;
  LastModifiedTimeBefore?: Date;
  MaxResults?: number;
  NextToken?: string;
  NameContains?: string;
  SortBy?: SortBy;
  SortOrder?: SortOrder;
  StatusEquals?: LabelingJobStatus;
}
export interface ListLabelingJobsResponse {
  LabelingJobSummaryList?: LabelingJobSummary[];
  NextToken?: string;
}
export declare const ListLabelingJobsForWorkteamSortByOptions: {
  readonly CREATION_TIME: "CreationTime";
};
export type ListLabelingJobsForWorkteamSortByOptions =
  (typeof ListLabelingJobsForWorkteamSortByOptions)[keyof typeof ListLabelingJobsForWorkteamSortByOptions];
export interface ListLabelingJobsForWorkteamRequest {
  WorkteamArn: string | undefined;
  MaxResults?: number;
  NextToken?: string;
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  JobReferenceCodeContains?: string;
  SortBy?: ListLabelingJobsForWorkteamSortByOptions;
  SortOrder?: SortOrder;
}
export interface ListLabelingJobsForWorkteamResponse {
  LabelingJobSummaryList: LabelingJobForWorkteamSummary[] | undefined;
  NextToken?: string;
}
export declare const SortLineageGroupsBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly NAME: "Name";
};
export type SortLineageGroupsBy =
  (typeof SortLineageGroupsBy)[keyof typeof SortLineageGroupsBy];
export interface ListLineageGroupsRequest {
  CreatedAfter?: Date;
  CreatedBefore?: Date;
  SortBy?: SortLineageGroupsBy;
  SortOrder?: SortOrder;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListLineageGroupsResponse {
  LineageGroupSummaries?: LineageGroupSummary[];
  NextToken?: string;
}
export declare const SortTrackingServerBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly NAME: "Name";
  readonly STATUS: "Status";
};
export type SortTrackingServerBy =
  (typeof SortTrackingServerBy)[keyof typeof SortTrackingServerBy];
export interface ListMlflowTrackingServersRequest {
  CreatedAfter?: Date;
  CreatedBefore?: Date;
  TrackingServerStatus?: TrackingServerStatus;
  MlflowVersion?: string;
  SortBy?: SortTrackingServerBy;
  SortOrder?: SortOrder;
  NextToken?: string;
  MaxResults?: number;
}
export interface TrackingServerSummary {
  TrackingServerArn?: string;
  TrackingServerName?: string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  TrackingServerStatus?: TrackingServerStatus;
  IsActive?: IsTrackingServerActive;
  MlflowVersion?: string;
}
export interface ListMlflowTrackingServersResponse {
  TrackingServerSummaries?: TrackingServerSummary[];
  NextToken?: string;
}
export interface ListModelBiasJobDefinitionsRequest {
  EndpointName?: string;
  SortBy?: MonitoringJobDefinitionSortKey;
  SortOrder?: SortOrder;
  NextToken?: string;
  MaxResults?: number;
  NameContains?: string;
  CreationTimeBefore?: Date;
  CreationTimeAfter?: Date;
}
export interface ListModelBiasJobDefinitionsResponse {
  JobDefinitionSummaries: MonitoringJobDefinitionSummary[] | undefined;
  NextToken?: string;
}
export declare const ModelCardExportJobSortBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly NAME: "Name";
  readonly STATUS: "Status";
};
export type ModelCardExportJobSortBy =
  (typeof ModelCardExportJobSortBy)[keyof typeof ModelCardExportJobSortBy];
export declare const ModelCardExportJobSortOrder: {
  readonly ASCENDING: "Ascending";
  readonly DESCENDING: "Descending";
};
export type ModelCardExportJobSortOrder =
  (typeof ModelCardExportJobSortOrder)[keyof typeof ModelCardExportJobSortOrder];
export interface ListModelCardExportJobsRequest {
  ModelCardName: string | undefined;
  ModelCardVersion?: number;
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  ModelCardExportJobNameContains?: string;
  StatusEquals?: ModelCardExportJobStatus;
  SortBy?: ModelCardExportJobSortBy;
  SortOrder?: ModelCardExportJobSortOrder;
  NextToken?: string;
  MaxResults?: number;
}
export interface ModelCardExportJobSummary {
  ModelCardExportJobName: string | undefined;
  ModelCardExportJobArn: string | undefined;
  Status: ModelCardExportJobStatus | undefined;
  ModelCardName: string | undefined;
  ModelCardVersion: number | undefined;
  CreatedAt: Date | undefined;
  LastModifiedAt: Date | undefined;
}
export interface ListModelCardExportJobsResponse {
  ModelCardExportJobSummaries: ModelCardExportJobSummary[] | undefined;
  NextToken?: string;
}
export declare const ModelCardSortBy: {
  readonly CREATION_TIME: "CreationTime";
  readonly NAME: "Name";
};
export type ModelCardSortBy =
  (typeof ModelCardSortBy)[keyof typeof ModelCardSortBy];
export declare const ModelCardSortOrder: {
  readonly ASCENDING: "Ascending";
  readonly DESCENDING: "Descending";
};
export type ModelCardSortOrder =
  (typeof ModelCardSortOrder)[keyof typeof ModelCardSortOrder];
export interface ListModelCardsRequest {
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  MaxResults?: number;
  NameContains?: string;
  ModelCardStatus?: ModelCardStatus;
  NextToken?: string;
  SortBy?: ModelCardSortBy;
  SortOrder?: ModelCardSortOrder;
}
export interface ModelCardSummary {
  ModelCardName: string | undefined;
  ModelCardArn: string | undefined;
  ModelCardStatus: ModelCardStatus | undefined;
  CreationTime: Date | undefined;
  LastModifiedTime?: Date;
}
export interface ListModelCardsResponse {
  ModelCardSummaries: ModelCardSummary[] | undefined;
  NextToken?: string;
}
export declare const ModelCardVersionSortBy: {
  readonly VERSION: "Version";
};
export type ModelCardVersionSortBy =
  (typeof ModelCardVersionSortBy)[keyof typeof ModelCardVersionSortBy];
export interface ListModelCardVersionsRequest {
  CreationTimeAfter?: Date;
  CreationTimeBefore?: Date;
  MaxResults?: number;
  ModelCardName: string | undefined;
  ModelCardStatus?: ModelCardStatus;
  NextToken?: string;
  SortBy?: ModelCardVersionSortBy;
  SortOrder?: ModelCardSortOrder;
}
export declare const DescribeModelCardResponseFilterSensitiveLog: (
  obj: DescribeModelCardResponse
) => any;
export declare const DescribeModelPackageOutputFilterSensitiveLog: (
  obj: DescribeModelPackageOutput
) => any;
