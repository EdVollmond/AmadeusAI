import { FineTuneableModel } from "./finetuneablemodel.js";
import { GithubRepositoryIn, GithubRepositoryIn$Outbound } from "./githubrepositoryin.js";
import { TrainingFile, TrainingFile$Outbound } from "./trainingfile.js";
import { TrainingParametersIn, TrainingParametersIn$Outbound } from "./trainingparametersin.js";
import { WandbIntegration, WandbIntegration$Outbound } from "./wandbintegration.js";
import * as z from "zod";
export type JobIn = {
    /**
     * The name of the model to fine-tune.
     */
    model: FineTuneableModel;
    trainingFiles?: Array<TrainingFile> | undefined;
    /**
     * A list containing the IDs of uploaded files that contain validation data. If you provide these files, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in `checkpoints` when getting the status of a running fine-tuning job. The same data should not be present in both train and validation files.
     */
    validationFiles?: Array<string> | null | undefined;
    /**
     * The fine-tuning hyperparameter settings used in a fine-tune job.
     */
    hyperparameters: TrainingParametersIn;
    /**
     * A string that will be added to your fine-tuning model name. For example, a suffix of "my-great-model" would produce a model name like `ft:open-mistral-7b:my-great-model:xxx...`
     */
    suffix?: string | null | undefined;
    /**
     * A list of integrations to enable for your fine-tuning job.
     */
    integrations?: Array<WandbIntegration> | null | undefined;
    repositories?: Array<GithubRepositoryIn> | undefined;
    /**
     * This field will be required in a future release.
     */
    autoStart?: boolean | undefined;
};
/** @internal */
export declare const JobIn$inboundSchema: z.ZodType<JobIn, z.ZodTypeDef, unknown>;
/** @internal */
export type JobIn$Outbound = {
    model: string;
    training_files?: Array<TrainingFile$Outbound> | undefined;
    validation_files?: Array<string> | null | undefined;
    hyperparameters: TrainingParametersIn$Outbound;
    suffix?: string | null | undefined;
    integrations?: Array<WandbIntegration$Outbound> | null | undefined;
    repositories?: Array<GithubRepositoryIn$Outbound> | undefined;
    auto_start?: boolean | undefined;
};
/** @internal */
export declare const JobIn$outboundSchema: z.ZodType<JobIn$Outbound, z.ZodTypeDef, JobIn>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace JobIn$ {
    /** @deprecated use `JobIn$inboundSchema` instead. */
    const inboundSchema: z.ZodType<JobIn, z.ZodTypeDef, unknown>;
    /** @deprecated use `JobIn$outboundSchema` instead. */
    const outboundSchema: z.ZodType<JobIn$Outbound, z.ZodTypeDef, JobIn>;
    /** @deprecated use `JobIn$Outbound` instead. */
    type Outbound = JobIn$Outbound;
}
//# sourceMappingURL=jobin.d.ts.map