import { ClosedEnum } from "../../types/enums.js";
import { AssistantMessage, AssistantMessage$Outbound } from "./assistantmessage.js";
import { ResponseFormat, ResponseFormat$Outbound } from "./responseformat.js";
import { Tool, Tool$Outbound } from "./tool.js";
import { ToolMessage, ToolMessage$Outbound } from "./toolmessage.js";
import { UserMessage, UserMessage$Outbound } from "./usermessage.js";
import * as z from "zod";
/**
 * Stop generation if this token is detected. Or if one of these tokens is detected when providing an array
 */
export type AgentsCompletionRequestStop = string | Array<string>;
export type AgentsCompletionRequestMessages = (UserMessage & {
    role: "user";
}) | (AssistantMessage & {
    role: "assistant";
}) | (ToolMessage & {
    role: "tool";
});
export declare const AgentsCompletionRequestToolChoice: {
    readonly Auto: "auto";
    readonly None: "none";
    readonly Any: "any";
};
export type AgentsCompletionRequestToolChoice = ClosedEnum<typeof AgentsCompletionRequestToolChoice>;
export type AgentsCompletionRequest = {
    /**
     * The maximum number of tokens to generate in the completion. The token count of your prompt plus `max_tokens` cannot exceed the model's context length.
     */
    maxTokens?: number | null | undefined;
    /**
     * The minimum number of tokens to generate in the completion.
     */
    minTokens?: number | null | undefined;
    /**
     * Whether to stream back partial progress. If set, tokens will be sent as data-only server-side events as they become available, with the stream terminated by a data: [DONE] message. Otherwise, the server will hold the request open until the timeout or until completion, with the response containing the full result as JSON.
     */
    stream?: boolean | undefined;
    /**
     * Stop generation if this token is detected. Or if one of these tokens is detected when providing an array
     */
    stop?: string | Array<string> | undefined;
    /**
     * The seed to use for random sampling. If set, different calls will generate deterministic results.
     */
    randomSeed?: number | null | undefined;
    /**
     * The prompt(s) to generate completions for, encoded as a list of dict with role and content.
     */
    messages: Array<(UserMessage & {
        role: "user";
    }) | (AssistantMessage & {
        role: "assistant";
    }) | (ToolMessage & {
        role: "tool";
    })>;
    responseFormat?: ResponseFormat | undefined;
    tools?: Array<Tool> | null | undefined;
    toolChoice?: AgentsCompletionRequestToolChoice | undefined;
    /**
     * The ID of the agent to use for this completion.
     */
    agentId: string;
};
/** @internal */
export declare const AgentsCompletionRequestStop$inboundSchema: z.ZodType<AgentsCompletionRequestStop, z.ZodTypeDef, unknown>;
/** @internal */
export type AgentsCompletionRequestStop$Outbound = string | Array<string>;
/** @internal */
export declare const AgentsCompletionRequestStop$outboundSchema: z.ZodType<AgentsCompletionRequestStop$Outbound, z.ZodTypeDef, AgentsCompletionRequestStop>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AgentsCompletionRequestStop$ {
    /** @deprecated use `AgentsCompletionRequestStop$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AgentsCompletionRequestStop, z.ZodTypeDef, unknown>;
    /** @deprecated use `AgentsCompletionRequestStop$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AgentsCompletionRequestStop$Outbound, z.ZodTypeDef, AgentsCompletionRequestStop>;
    /** @deprecated use `AgentsCompletionRequestStop$Outbound` instead. */
    type Outbound = AgentsCompletionRequestStop$Outbound;
}
/** @internal */
export declare const AgentsCompletionRequestMessages$inboundSchema: z.ZodType<AgentsCompletionRequestMessages, z.ZodTypeDef, unknown>;
/** @internal */
export type AgentsCompletionRequestMessages$Outbound = (UserMessage$Outbound & {
    role: "user";
}) | (AssistantMessage$Outbound & {
    role: "assistant";
}) | (ToolMessage$Outbound & {
    role: "tool";
});
/** @internal */
export declare const AgentsCompletionRequestMessages$outboundSchema: z.ZodType<AgentsCompletionRequestMessages$Outbound, z.ZodTypeDef, AgentsCompletionRequestMessages>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AgentsCompletionRequestMessages$ {
    /** @deprecated use `AgentsCompletionRequestMessages$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AgentsCompletionRequestMessages, z.ZodTypeDef, unknown>;
    /** @deprecated use `AgentsCompletionRequestMessages$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AgentsCompletionRequestMessages$Outbound, z.ZodTypeDef, AgentsCompletionRequestMessages>;
    /** @deprecated use `AgentsCompletionRequestMessages$Outbound` instead. */
    type Outbound = AgentsCompletionRequestMessages$Outbound;
}
/** @internal */
export declare const AgentsCompletionRequestToolChoice$inboundSchema: z.ZodNativeEnum<typeof AgentsCompletionRequestToolChoice>;
/** @internal */
export declare const AgentsCompletionRequestToolChoice$outboundSchema: z.ZodNativeEnum<typeof AgentsCompletionRequestToolChoice>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AgentsCompletionRequestToolChoice$ {
    /** @deprecated use `AgentsCompletionRequestToolChoice$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Auto: "auto";
        readonly None: "none";
        readonly Any: "any";
    }>;
    /** @deprecated use `AgentsCompletionRequestToolChoice$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Auto: "auto";
        readonly None: "none";
        readonly Any: "any";
    }>;
}
/** @internal */
export declare const AgentsCompletionRequest$inboundSchema: z.ZodType<AgentsCompletionRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type AgentsCompletionRequest$Outbound = {
    max_tokens?: number | null | undefined;
    min_tokens?: number | null | undefined;
    stream: boolean;
    stop?: string | Array<string> | undefined;
    random_seed?: number | null | undefined;
    messages: Array<(UserMessage$Outbound & {
        role: "user";
    }) | (AssistantMessage$Outbound & {
        role: "assistant";
    }) | (ToolMessage$Outbound & {
        role: "tool";
    })>;
    response_format?: ResponseFormat$Outbound | undefined;
    tools?: Array<Tool$Outbound> | null | undefined;
    tool_choice: string;
    agent_id: string;
};
/** @internal */
export declare const AgentsCompletionRequest$outboundSchema: z.ZodType<AgentsCompletionRequest$Outbound, z.ZodTypeDef, AgentsCompletionRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AgentsCompletionRequest$ {
    /** @deprecated use `AgentsCompletionRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AgentsCompletionRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `AgentsCompletionRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AgentsCompletionRequest$Outbound, z.ZodTypeDef, AgentsCompletionRequest>;
    /** @deprecated use `AgentsCompletionRequest$Outbound` instead. */
    type Outbound = AgentsCompletionRequest$Outbound;
}
//# sourceMappingURL=agentscompletionrequest.d.ts.map