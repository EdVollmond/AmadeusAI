"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatCompletionRequest$ = exports.ChatCompletionRequest$outboundSchema = exports.ChatCompletionRequest$inboundSchema = exports.ToolChoice$ = exports.ToolChoice$outboundSchema = exports.ToolChoice$inboundSchema = exports.Messages$ = exports.Messages$outboundSchema = exports.Messages$inboundSchema = exports.Stop$ = exports.Stop$outboundSchema = exports.Stop$inboundSchema = exports.ToolChoice = void 0;
const primitives_js_1 = require("../../lib/primitives.js");
const assistantmessage_js_1 = require("./assistantmessage.js");
const responseformat_js_1 = require("./responseformat.js");
const systemmessage_js_1 = require("./systemmessage.js");
const tool_js_1 = require("./tool.js");
const toolmessage_js_1 = require("./toolmessage.js");
const usermessage_js_1 = require("./usermessage.js");
const z = __importStar(require("zod"));
exports.ToolChoice = {
    Auto: "auto",
    None: "none",
    Any: "any",
};
/** @internal */
exports.Stop$inboundSchema = z.union([
    z.string(),
    z.array(z.string()),
]);
/** @internal */
exports.Stop$outboundSchema = z.union([
    z.string(),
    z.array(z.string()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Stop$;
(function (Stop$) {
    /** @deprecated use `Stop$inboundSchema` instead. */
    Stop$.inboundSchema = exports.Stop$inboundSchema;
    /** @deprecated use `Stop$outboundSchema` instead. */
    Stop$.outboundSchema = exports.Stop$outboundSchema;
})(Stop$ || (exports.Stop$ = Stop$ = {}));
/** @internal */
exports.Messages$inboundSchema = z.union([
    systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({ role: v.role }))),
    usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role }))),
    assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({ role: v.role }))),
    toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role }))),
]);
/** @internal */
exports.Messages$outboundSchema = z.union([
    systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({ role: v.role }))),
    usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role }))),
    assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({ role: v.role }))),
    toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Messages$;
(function (Messages$) {
    /** @deprecated use `Messages$inboundSchema` instead. */
    Messages$.inboundSchema = exports.Messages$inboundSchema;
    /** @deprecated use `Messages$outboundSchema` instead. */
    Messages$.outboundSchema = exports.Messages$outboundSchema;
})(Messages$ || (exports.Messages$ = Messages$ = {}));
/** @internal */
exports.ToolChoice$inboundSchema = z.nativeEnum(exports.ToolChoice);
/** @internal */
exports.ToolChoice$outboundSchema = exports.ToolChoice$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ToolChoice$;
(function (ToolChoice$) {
    /** @deprecated use `ToolChoice$inboundSchema` instead. */
    ToolChoice$.inboundSchema = exports.ToolChoice$inboundSchema;
    /** @deprecated use `ToolChoice$outboundSchema` instead. */
    ToolChoice$.outboundSchema = exports.ToolChoice$outboundSchema;
})(ToolChoice$ || (exports.ToolChoice$ = ToolChoice$ = {}));
/** @internal */
exports.ChatCompletionRequest$inboundSchema = z
    .object({
    model: z.nullable(z.string()),
    temperature: z.number().default(0.7),
    top_p: z.number().default(1),
    max_tokens: z.nullable(z.number().int()).optional(),
    min_tokens: z.nullable(z.number().int()).optional(),
    stream: z.boolean().default(false),
    stop: z.union([z.string(), z.array(z.string())]).optional(),
    random_seed: z.nullable(z.number().int()).optional(),
    messages: z.array(z.union([
        systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({ role: v.role }))),
        usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role }))),
        assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({ role: v.role }))),
        toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role }))),
    ])),
    response_format: responseformat_js_1.ResponseFormat$inboundSchema.optional(),
    tools: z.nullable(z.array(tool_js_1.Tool$inboundSchema)).optional(),
    tool_choice: exports.ToolChoice$inboundSchema.default("auto"),
    safe_prompt: z.boolean().default(false),
})
    .transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        top_p: "topP",
        max_tokens: "maxTokens",
        min_tokens: "minTokens",
        random_seed: "randomSeed",
        response_format: "responseFormat",
        tool_choice: "toolChoice",
        safe_prompt: "safePrompt",
    });
});
/** @internal */
exports.ChatCompletionRequest$outboundSchema = z
    .object({
    model: z.nullable(z.string()),
    temperature: z.number().default(0.7),
    topP: z.number().default(1),
    maxTokens: z.nullable(z.number().int()).optional(),
    minTokens: z.nullable(z.number().int()).optional(),
    stream: z.boolean().default(false),
    stop: z.union([z.string(), z.array(z.string())]).optional(),
    randomSeed: z.nullable(z.number().int()).optional(),
    messages: z.array(z.union([
        systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({ role: v.role }))),
        usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role }))),
        assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({ role: v.role }))),
        toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role }))),
    ])),
    responseFormat: responseformat_js_1.ResponseFormat$outboundSchema.optional(),
    tools: z.nullable(z.array(tool_js_1.Tool$outboundSchema)).optional(),
    toolChoice: exports.ToolChoice$outboundSchema.default("auto"),
    safePrompt: z.boolean().default(false),
})
    .transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        topP: "top_p",
        maxTokens: "max_tokens",
        minTokens: "min_tokens",
        randomSeed: "random_seed",
        responseFormat: "response_format",
        toolChoice: "tool_choice",
        safePrompt: "safe_prompt",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ChatCompletionRequest$;
(function (ChatCompletionRequest$) {
    /** @deprecated use `ChatCompletionRequest$inboundSchema` instead. */
    ChatCompletionRequest$.inboundSchema = exports.ChatCompletionRequest$inboundSchema;
    /** @deprecated use `ChatCompletionRequest$outboundSchema` instead. */
    ChatCompletionRequest$.outboundSchema = exports.ChatCompletionRequest$outboundSchema;
})(ChatCompletionRequest$ || (exports.ChatCompletionRequest$ = ChatCompletionRequest$ = {}));
//# sourceMappingURL=chatcompletionrequest.js.map