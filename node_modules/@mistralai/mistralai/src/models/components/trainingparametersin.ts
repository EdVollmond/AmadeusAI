/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * The fine-tuning hyperparameter settings used in a fine-tune job.
 */
export type TrainingParametersIn = {
    /**
     * The number of training steps to perform. A training step refers to a single update of the model weights during the fine-tuning process. This update is typically calculated using a batch of samples from the training dataset.
     */
    trainingSteps?: number | null | undefined;
    /**
     * A parameter describing how much to adjust the pre-trained model's weights in response to the estimated error each time the weights are updated during the fine-tuning process.
     */
    learningRate?: number | undefined;
    epochs?: number | null | undefined;
    fimRatio?: number | null | undefined;
};

/** @internal */
export const TrainingParametersIn$inboundSchema: z.ZodType<
    TrainingParametersIn,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        training_steps: z.nullable(z.number().int()).optional(),
        learning_rate: z.number().default(0.0001),
        epochs: z.nullable(z.number()).optional(),
        fim_ratio: z.nullable(z.number()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            training_steps: "trainingSteps",
            learning_rate: "learningRate",
            fim_ratio: "fimRatio",
        });
    });

/** @internal */
export type TrainingParametersIn$Outbound = {
    training_steps?: number | null | undefined;
    learning_rate: number;
    epochs?: number | null | undefined;
    fim_ratio?: number | null | undefined;
};

/** @internal */
export const TrainingParametersIn$outboundSchema: z.ZodType<
    TrainingParametersIn$Outbound,
    z.ZodTypeDef,
    TrainingParametersIn
> = z
    .object({
        trainingSteps: z.nullable(z.number().int()).optional(),
        learningRate: z.number().default(0.0001),
        epochs: z.nullable(z.number()).optional(),
        fimRatio: z.nullable(z.number()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            trainingSteps: "training_steps",
            learningRate: "learning_rate",
            fimRatio: "fim_ratio",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TrainingParametersIn$ {
    /** @deprecated use `TrainingParametersIn$inboundSchema` instead. */
    export const inboundSchema = TrainingParametersIn$inboundSchema;
    /** @deprecated use `TrainingParametersIn$outboundSchema` instead. */
    export const outboundSchema = TrainingParametersIn$outboundSchema;
    /** @deprecated use `TrainingParametersIn$Outbound` instead. */
    export type Outbound = TrainingParametersIn$Outbound;
}
