/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    FunctionT,
    FunctionT$inboundSchema,
    FunctionT$Outbound,
    FunctionT$outboundSchema,
} from "./function.js";
import * as z from "zod";

export type Tool = {
    type?: "function" | undefined;
    function: FunctionT;
};

/** @internal */
export const Tool$inboundSchema: z.ZodType<Tool, z.ZodTypeDef, unknown> = z.object({
    type: z.literal("function"),
    function: FunctionT$inboundSchema,
});

/** @internal */
export type Tool$Outbound = {
    type: "function";
    function: FunctionT$Outbound;
};

/** @internal */
export const Tool$outboundSchema: z.ZodType<Tool$Outbound, z.ZodTypeDef, Tool> = z.object({
    type: z.literal("function").default("function" as const),
    function: FunctionT$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tool$ {
    /** @deprecated use `Tool$inboundSchema` instead. */
    export const inboundSchema = Tool$inboundSchema;
    /** @deprecated use `Tool$outboundSchema` instead. */
    export const outboundSchema = Tool$outboundSchema;
    /** @deprecated use `Tool$Outbound` instead. */
    export type Outbound = Tool$Outbound;
}
