"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.completion = exports.MODEL_HANDLER_MAPPINGS = void 0;
const getHandler_1 = require("./handlers/getHandler");
const anthropic_1 = require("./handlers/anthropic");
const cohere_1 = require("./handlers/cohere");
const ollama_1 = require("./handlers/ollama");
const openai_1 = require("./handlers/openai");
const ai21_1 = require("./handlers/ai21");
const replicate_1 = require("./handlers/replicate");
const deepinfra_1 = require("./handlers/deepinfra");
const mistral_1 = require("./handlers/mistral");
exports.MODEL_HANDLER_MAPPINGS = {
    'claude-': anthropic_1.AnthropicHandler,
    'gpt-': openai_1.OpenAIHandler,
    'openai/': openai_1.OpenAIHandler,
    command: cohere_1.CohereHandler,
    'ollama/': ollama_1.OllamaHandler,
    'j2-': ai21_1.AI21Handler,
    'replicate/': replicate_1.ReplicateHandler,
    'deepinfra/': deepinfra_1.DeepInfraHandler,
    'mistral/': mistral_1.MistralHandler,
};
function completion(params) {
    return __awaiter(this, void 0, void 0, function* () {
        const handler = (0, getHandler_1.getHandler)(params.model, exports.MODEL_HANDLER_MAPPINGS);
        if (!handler) {
            throw new Error(`Model: ${params.model} not supported. Cannot find a handler.`);
        }
        return handler(params);
    });
}
exports.completion = completion;
