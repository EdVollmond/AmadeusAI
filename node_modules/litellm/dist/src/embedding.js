"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.embedding = void 0;
const getHandler_1 = require("./handlers/getHandler");
const openaiEmbedding_1 = require("./handlers/openaiEmbedding");
const ollamaEmbedding_1 = require("./handlers/ollamaEmbedding");
const mistralEmbedding_1 = require("./handlers/mistralEmbedding");
const EMBEDDING_MODEL_HANDLER_MAPPINGS = {
    'text-embedding-': openaiEmbedding_1.OpenAIEmbeddingHandler,
    'ollama/': ollamaEmbedding_1.OllamaEmbeddingHandler,
    'mistral/': mistralEmbedding_1.MistralEmbeddingHandler,
};
function embedding(params) {
    return __awaiter(this, void 0, void 0, function* () {
        const handler = (0, getHandler_1.getHandler)(params.model, EMBEDDING_MODEL_HANDLER_MAPPINGS);
        if (!handler) {
            throw new Error(`Model: ${params.model} not supported. Cannot find a handler.`);
        }
        return handler(params);
    });
}
exports.embedding = embedding;
