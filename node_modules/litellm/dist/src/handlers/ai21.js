"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AI21Handler = void 0;
const combinePrompts_1 = require("../utils/combinePrompts");
const getUnixTimestamp_1 = require("../utils/getUnixTimestamp");
const FINISH_REASON_MAP = {
    length: 'length',
    endoftext: 'stop',
};
function toUsage(response) {
    const promptTokens = response.prompt.tokens.length;
    const completionTokens = response.completions.reduce((acc, completion) => {
        return acc + completion.data.tokens.length;
    }, 0);
    return {
        prompt_tokens: promptTokens,
        completion_tokens: completionTokens,
        total_tokens: promptTokens + completionTokens,
    };
}
// eslint-disable-next-line @typescript-eslint/require-await
function toStream(response, model) {
    var _a;
    return __asyncGenerator(this, arguments, function* toStream_1() {
        yield yield __await({
            model: model,
            created: (0, getUnixTimestamp_1.getUnixTimestamp)(),
            usage: toUsage(response),
            choices: [
                {
                    delta: {
                        content: response.completions[0].data.text,
                        role: 'assistant',
                    },
                    finish_reason: (_a = FINISH_REASON_MAP[response.completions[0].finishReason.reason]) !== null && _a !== void 0 ? _a : 'stop',
                    index: 0,
                },
            ],
        });
    });
}
function toResponse(response, model) {
    const choices = response.completions.map((completion, i) => {
        var _a;
        return {
            finish_reason: (_a = FINISH_REASON_MAP[completion.finishReason.reason]) !== null && _a !== void 0 ? _a : 'stop',
            index: i,
            message: {
                content: completion.data.text,
                role: 'assistant',
            },
        };
    });
    return {
        model: model,
        created: (0, getUnixTimestamp_1.getUnixTimestamp)(),
        usage: toUsage(response),
        choices: choices,
    };
}
function getAI21Response(model, prompt, baseUrl, apiKey) {
    return __awaiter(this, void 0, void 0, function* () {
        return fetch(`${baseUrl}/studio/v1/${model}/complete`, {
            method: 'POST',
            headers: {
                Authorization: `Bearer ${apiKey}`,
                'Content-Type': 'application/json',
                accept: 'application/json',
            },
            body: JSON.stringify({
                prompt,
            }),
        });
    });
}
function AI21Handler(params) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const baseUrl = (_a = params.baseUrl) !== null && _a !== void 0 ? _a : 'https://api.ai21.com';
        const apiKey = (_b = params.apiKey) !== null && _b !== void 0 ? _b : process.env.AI21_API_KEY;
        const model = params.model;
        const prompt = (0, combinePrompts_1.combinePrompts)(params.messages);
        const res = yield getAI21Response(model, prompt, baseUrl, apiKey);
        if (!res.ok) {
            throw new Error(`Received an error with code ${res.status} from AI21 API.`);
        }
        const body = (yield res.json());
        if (params.stream) {
            return toStream(body, model);
        }
        return toResponse(body, model);
    });
}
exports.AI21Handler = AI21Handler;
