"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnthropicHandler = void 0;
const sdk_1 = __importDefault(require("@anthropic-ai/sdk"));
const combinePrompts_1 = require("../utils/combinePrompts");
const getUnixTimestamp_1 = require("../utils/getUnixTimestamp");
const toUsage_1 = require("../utils/toUsage");
function toAnthropicPrompt(messages) {
    const textsCombined = (0, combinePrompts_1.combinePrompts)(messages);
    return `${sdk_1.default.HUMAN_PROMPT} ${textsCombined}${sdk_1.default.AI_PROMPT}`;
}
function toFinishReson(string) {
    if (string === 'max_tokens') {
        return 'length';
    }
    return 'stop';
}
function toResponse(anthropicResponse, prompt) {
    return {
        model: anthropicResponse.model,
        created: (0, getUnixTimestamp_1.getUnixTimestamp)(),
        usage: (0, toUsage_1.toUsage)(prompt, anthropicResponse.completion),
        choices: [
            {
                message: {
                    content: anthropicResponse.completion,
                    role: 'assistant',
                },
                finish_reason: toFinishReson(anthropicResponse.stop_reason),
                index: 0,
            },
        ],
    };
}
function toStreamingChunk(anthropicResponse) {
    return {
        model: anthropicResponse.model,
        created: (0, getUnixTimestamp_1.getUnixTimestamp)(),
        choices: [
            {
                delta: { content: anthropicResponse.completion, role: 'assistant' },
                finish_reason: toFinishReson(anthropicResponse.stop_reason),
                index: 0,
            },
        ],
    };
}
function toStreamingResponse(stream) {
    return __asyncGenerator(this, arguments, function* toStreamingResponse_1() {
        var _a, e_1, _b, _c;
        try {
            for (var _d = true, stream_1 = __asyncValues(stream), stream_1_1; stream_1_1 = yield __await(stream_1.next()), _a = stream_1_1.done, !_a; _d = true) {
                _c = stream_1_1.value;
                _d = false;
                const chunk = _c;
                yield yield __await(toStreamingChunk(chunk));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = stream_1.return)) yield __await(_b.call(stream_1));
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
}
function AnthropicHandler(params) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const apiKey = (_a = params.apiKey) !== null && _a !== void 0 ? _a : process.env.ANTHROPIC_API_KEY;
        const anthropic = new sdk_1.default({
            apiKey: apiKey,
        });
        const prompt = toAnthropicPrompt(params.messages);
        const anthropicParams = {
            model: params.model,
            max_tokens_to_sample: 300,
            prompt,
        };
        if (params.stream) {
            const completionStream = yield anthropic.completions.create(Object.assign(Object.assign({}, anthropicParams), { stream: params.stream }));
            return toStreamingResponse(completionStream);
        }
        const completion = yield anthropic.completions.create(anthropicParams);
        return toResponse(completion, prompt);
    });
}
exports.AnthropicHandler = AnthropicHandler;
