"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OllamaEmbeddingHandler = void 0;
const toUsage_1 = require("../utils/toUsage");
function getOllamaResponse(model, input, baseUrl) {
    return __awaiter(this, void 0, void 0, function* () {
        return fetch(`${baseUrl}/api/embeddings`, {
            method: 'POST',
            body: JSON.stringify({
                model,
                prompt: input,
                stream: false,
                headers: {
                    'Content-Type': 'application/json',
                },
            }),
        });
    });
}
function OllamaEmbeddingHandler(params) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const model = params.model.split('ollama/')[1];
        const baseUrl = (_a = params.baseUrl) !== null && _a !== void 0 ? _a : 'http://127.0.0.1:11434';
        const input = typeof params.input === 'string'
            ? params.input
            : params.input.reduce((acc, curr) => (acc += curr), '');
        const response = yield getOllamaResponse(model, input, baseUrl);
        if (!response.ok) {
            throw new Error(`Received an error with code ${response.status} from Ollama API.`);
        }
        const body = (yield response.json());
        return {
            data: [{ embedding: body.embedding, index: 0 }],
            model: model,
            usage: (0, toUsage_1.toEmbeddingUsage)(input),
        };
    });
}
exports.OllamaEmbeddingHandler = OllamaEmbeddingHandler;
