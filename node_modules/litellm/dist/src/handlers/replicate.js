"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReplicateHandler = void 0;
const replicate_1 = __importDefault(require("replicate"));
const eventsource_1 = __importDefault(require("eventsource"));
const combinePrompts_1 = require("../utils/combinePrompts");
const toUsage_1 = require("../utils/toUsage");
const getUnixTimestamp_1 = require("../utils/getUnixTimestamp");
function sleep(time) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((res) => {
            setTimeout(() => {
                res({});
            }, time);
        });
    });
}
function handleNonStreamingPrediction(prompt, prediction, replicate) {
    return __awaiter(this, void 0, void 0, function* () {
        const pred = yield replicate.wait(prediction, {});
        const output = pred.output.reduce((acc, curr) => (acc += curr), '');
        return {
            usage: (0, toUsage_1.toUsage)(prompt, output),
            created: (0, getUnixTimestamp_1.getUnixTimestamp)(),
            choices: [
                {
                    message: {
                        role: 'assistant',
                        content: output,
                    },
                    finish_reason: 'stop',
                    index: 0,
                },
            ],
        };
    });
}
function handleStreamingPrediction(prompt, prediction) {
    var _a;
    return __asyncGenerator(this, arguments, function* handleStreamingPrediction_1() {
        if (!((_a = prediction === null || prediction === void 0 ? void 0 : prediction.urls) === null || _a === void 0 ? void 0 : _a.stream)) {
            throw new Error();
        }
        const source = new eventsource_1.default(prediction.urls.stream, {
            withCredentials: true,
        });
        let results = [];
        let done = false;
        // added comments because of funky conversion of EventSource to AsyncIterator - For context: https://stackoverflow.com/questions/51045136/how-can-i-use-a-event-emitter-as-an-async-generator
        // initialise a dummy promise - with a function called resolve in this scope set to its resolver
        let resolve;
        let promise = new Promise((r) => (resolve = r));
        source.addEventListener('output', (e) => {
            results.push(e.data);
            // resolve the previous promise
            resolve({});
            // override the promise - overide the resolve with the resolver of this promise
            promise = new Promise((r) => (resolve = r));
        });
        source.addEventListener('done', () => {
            done = true;
            source.close();
        });
        while (!done) {
            // await the last promise
            yield __await(promise);
            // sleep half a second - to avoid being throttled and rate limited by replicate
            yield __await(sleep(500));
            // flush the results since last yield
            const combined = results.reduce((acc, curr) => (acc += curr), '');
            yield yield __await({
                created: (0, getUnixTimestamp_1.getUnixTimestamp)(),
                usage: (0, toUsage_1.toUsage)(prompt, combined),
                choices: [
                    {
                        delta: {
                            content: combined,
                            role: 'assistant',
                        },
                        index: 0,
                        finish_reason: 'stop',
                    },
                ],
            });
            // reset the results
            results = [];
        }
    });
}
function ReplicateHandler(params) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const apiKey = (_a = params.apiKey) !== null && _a !== void 0 ? _a : process.env.REPLICATE_API_KEY;
        const replicate = new replicate_1.default({
            auth: apiKey,
        });
        const model = params.model.split('replicate/')[1];
        const version = model.split(':')[1];
        const prompt = (0, combinePrompts_1.combinePrompts)(params.messages);
        const prediction = yield replicate.predictions.create({
            version: version,
            stream: params.stream,
            input: {
                prompt,
            },
        });
        if (params.stream) {
            return handleStreamingPrediction(prompt, prediction);
        }
        return handleNonStreamingPrediction(prompt, prediction, replicate);
    });
}
exports.ReplicateHandler = ReplicateHandler;
