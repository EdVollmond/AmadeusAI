"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __asyncDelegator = (this && this.__asyncDelegator) || function (o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
};
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OllamaHandler = void 0;
const combinePrompts_1 = require("../utils/combinePrompts");
const getUnixTimestamp_1 = require("../utils/getUnixTimestamp");
const toUsage_1 = require("../utils/toUsage");
function toStreamingChunk(ollamaResponse, model, prompt) {
    return {
        model: model,
        created: (0, getUnixTimestamp_1.getUnixTimestamp)(),
        usage: (0, toUsage_1.toUsage)(prompt, ollamaResponse.response),
        choices: [
            {
                delta: { content: ollamaResponse.response, role: 'assistant' },
                finish_reason: 'stop',
                index: 0,
            },
        ],
    };
}
function toResponse(content, model, prompt) {
    return {
        model: model,
        created: (0, getUnixTimestamp_1.getUnixTimestamp)(),
        usage: (0, toUsage_1.toUsage)(prompt, content),
        choices: [
            {
                message: { content, role: 'assistant' },
                finish_reason: 'stop',
                index: 0,
            },
        ],
    };
}
function iterateResponse(response, model, prompt) {
    var _a;
    return __asyncGenerator(this, arguments, function* iterateResponse_1() {
        const reader = (_a = response.body) === null || _a === void 0 ? void 0 : _a.getReader();
        let done = false;
        while (!done) {
            const next = yield __await((reader === null || reader === void 0 ? void 0 : reader.read()));
            if (next === null || next === void 0 ? void 0 : next.value) {
                const decoded = new TextDecoder().decode(next.value);
                done = next.done;
                const lines = decoded.split(/(?<!\\)\n/);
                const ollamaResponses = lines
                    .map((line) => line.trim())
                    .filter((line) => line !== '')
                    .map((line) => JSON.parse(line))
                    .map((response) => toStreamingChunk(response, model, prompt));
                yield __await(yield* __asyncDelegator(__asyncValues(ollamaResponses)));
            }
            else {
                done = true;
            }
        }
    });
}
function getOllamaResponse(model, prompt, baseUrl) {
    return __awaiter(this, void 0, void 0, function* () {
        return fetch(`${baseUrl}/api/generate`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                model,
                prompt,
            }),
        });
    });
}
function OllamaHandler(params) {
    var _a, e_1, _b, _c;
    var _d;
    return __awaiter(this, void 0, void 0, function* () {
        const baseUrl = (_d = params.baseUrl) !== null && _d !== void 0 ? _d : 'http://127.0.0.1:11434';
        const model = params.model.split('ollama/')[1];
        const prompt = (0, combinePrompts_1.combinePrompts)(params.messages);
        const res = yield getOllamaResponse(model, prompt, baseUrl);
        if (!res.ok) {
            throw new Error(`Received an error with code ${res.status} from Ollama API.`);
        }
        if (params.stream) {
            return iterateResponse(res, model, prompt);
        }
        const chunks = [];
        try {
            for (var _e = true, _f = __asyncValues(iterateResponse(res, model, prompt)), _g; _g = yield _f.next(), _a = _g.done, !_a; _e = true) {
                _c = _g.value;
                _e = false;
                const chunk = _c;
                chunks.push(chunk);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_e && !_a && (_b = _f.return)) yield _b.call(_f);
            }
            finally { if (e_1) throw e_1.error; }
        }
        const message = chunks.reduce((acc, chunk) => {
            return (acc += chunk.choices[0].delta.content);
        }, '');
        return toResponse(message, model, prompt);
    });
}
exports.OllamaHandler = OllamaHandler;
