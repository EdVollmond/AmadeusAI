"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MistralHandler = void 0;
function iterateResponse(response) {
    var _a;
    return __asyncGenerator(this, arguments, function* iterateResponse_1() {
        const reader = (_a = response.body) === null || _a === void 0 ? void 0 : _a.getReader();
        let done = false;
        while (!done) {
            const next = yield __await((reader === null || reader === void 0 ? void 0 : reader.read()));
            if (next === null || next === void 0 ? void 0 : next.value) {
                done = next.done;
                const decoded = new TextDecoder().decode(next.value);
                if (decoded.startsWith('data: [DONE]')) {
                    done = true;
                }
                else {
                    const [, value] = decoded.split('data: ');
                    yield yield __await(JSON.parse(value));
                }
            }
            else {
                done = true;
            }
        }
    });
}
function getMistralResponse(model, messages, baseUrl, apiKey, stream) {
    return __awaiter(this, void 0, void 0, function* () {
        return fetch(`${baseUrl}/v1/chat/completions`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                Authorization: `Bearer ${apiKey}`,
            },
            body: JSON.stringify({
                messages,
                model,
                stream,
            }),
        });
    });
}
function MistralHandler(params) {
    var _a, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        const baseUrl = (_a = params.baseUrl) !== null && _a !== void 0 ? _a : 'https://api.mistral.ai';
        const apiKey = (_b = params.apiKey) !== null && _b !== void 0 ? _b : process.env.MISTRAL_API_KEY;
        const model = params.model.split('mistral/')[1];
        const res = yield getMistralResponse(model, params.messages, baseUrl, apiKey, (_c = params.stream) !== null && _c !== void 0 ? _c : false);
        if (params.stream) {
            return iterateResponse(res);
        }
        return res.json();
    });
}
exports.MistralHandler = MistralHandler;
