"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../src");
const TIMEOUT = 30000;
const PROMPT = 'How are you today?';
/**
 * @group e2e
 */
describe('e2e', () => {
    describe('completion', () => {
        it.each `
      model
      ${'gpt-3.5-turbo'}
      ${'ollama/llama2'}
      ${'command-nightly'}
      ${'j2-light'}
      ${'replicate/meta/llama-2-70b-chat:02e509c789964a7ea8736978a43525956ef40397be9033abf9fd2badfe68c9e3'}
      ${'deepinfra/mistralai/Mistral-7B-Instruct-v0.1'}
      ${'mistral/mistral-tiny'}
    `('gets response from supported model $model', ({ model }) => __awaiter(void 0, void 0, void 0, function* () {
            const result = yield (0, src_1.completion)({
                model: model,
                messages: [{ role: 'user', content: PROMPT }],
                stream: false,
            });
            expect(result).toBeTruthy();
            expect(result);
        }), TIMEOUT);
        it.each `
      model
      ${'gpt-3.5-turbo'}
      ${'ollama/llama2'}
      ${'command-nightly'}
      ${'j2-light'}
      ${'replicate/meta/llama-2-7b-chat:ac944f2e49c55c7e965fc3d93ad9a7d9d947866d6793fb849dd6b4747d0c061c'}
      ${'deepinfra/mistralai/Mistral-7B-Instruct-v0.1'}
      ${'mistral/mistral-tiny'}
    `('gets streaming response from supported model $model', ({ model }) => __awaiter(void 0, void 0, void 0, function* () {
            var _a, e_1, _b, _c;
            const result = yield (0, src_1.completion)({
                model: model,
                messages: [{ role: 'user', content: PROMPT }],
                stream: true,
            });
            try {
                for (var _d = true, result_1 = __asyncValues(result), result_1_1; result_1_1 = yield result_1.next(), _a = result_1_1.done, !_a; _d = true) {
                    _c = result_1_1.value;
                    _d = false;
                    const chunk = _c;
                    expect(chunk.choices[0].delta.content).not.toBeNull();
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = result_1.return)) yield _b.call(result_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }), TIMEOUT);
    });
    describe('embedding', () => {
        it.each `
      model
      ${'text-embedding-ada-002'}
      ${'ollama/llama2'}
      ${'mistral/mistral-embed'}
    `('returns embedding models for $model', ({ model }) => __awaiter(void 0, void 0, void 0, function* () {
            const result = yield (0, src_1.embedding)({
                model: model,
                input: PROMPT,
            });
            expect(result.data.length).toBeGreaterThan(0);
        }), TIMEOUT);
    });
});
