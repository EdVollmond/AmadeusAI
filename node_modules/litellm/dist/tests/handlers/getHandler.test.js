"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const completion_1 = require("../../src/completion");
const ai21_1 = require("../../src/handlers/ai21");
const anthropic_1 = require("../../src/handlers/anthropic");
const cohere_1 = require("../../src/handlers/cohere");
const deepinfra_1 = require("../../src/handlers/deepinfra");
const getHandler_1 = require("../../src/handlers/getHandler");
const mistral_1 = require("../../src/handlers/mistral");
const ollama_1 = require("../../src/handlers/ollama");
const openai_1 = require("../../src/handlers/openai");
const replicate_1 = require("../../src/handlers/replicate");
describe('getHandler', () => {
    it.each([
        { model: 'claude-2', expectedHandler: anthropic_1.AnthropicHandler },
        { model: 'claude-instant-1', expectedHandler: anthropic_1.AnthropicHandler },
        { model: 'gpt-3.5-turbo', expectedHandler: openai_1.OpenAIHandler },
        { model: 'openai/test', expectedHandler: openai_1.OpenAIHandler },
        { model: 'ollama/llama2', expectedHandler: ollama_1.OllamaHandler },
        { model: 'command-nightly', expectedHandler: cohere_1.CohereHandler },
        { model: 'j2-light', expectedHandler: ai21_1.AI21Handler },
        { model: 'j2-mid', expectedHandler: ai21_1.AI21Handler },
        { model: 'j2-ultra', expectedHandler: ai21_1.AI21Handler },
        { model: 'j2-grande-instruct', expectedHandler: ai21_1.AI21Handler },
        { model: 'j2-mid-instruct', expectedHandler: ai21_1.AI21Handler },
        { model: 'j2-ultra-instruct', expectedHandler: ai21_1.AI21Handler },
        { model: 'replicate/test/test', expectedHandler: replicate_1.ReplicateHandler },
        { model: 'deepinfra/test/test', expectedHandler: deepinfra_1.DeepInfraHandler },
        { model: 'mistral/mistral-tiny', expectedHandler: mistral_1.MistralHandler },
        { model: 'unknown', expectedHandler: null },
    ])('should return the correct handler for a given model name', ({ model, expectedHandler }) => {
        const handler = (0, getHandler_1.getHandler)(model, completion_1.MODEL_HANDLER_MAPPINGS);
        expect(handler).toBe(expectedHandler);
    });
});
