"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.V2ChatRequest = void 0;
const core = __importStar(require("../../../../../core"));
const ChatMessages_1 = require("../../types/ChatMessages");
const Tool2_1 = require("../../types/Tool2");
const V2ChatRequestToolChoice_1 = require("../../types/V2ChatRequestToolChoice");
const V2ChatRequestCitationMode_1 = require("../../types/V2ChatRequestCitationMode");
const V2ChatRequestTruncationMode_1 = require("../../types/V2ChatRequestTruncationMode");
const V2ChatRequestResponseFormat_1 = require("../../types/V2ChatRequestResponseFormat");
exports.V2ChatRequest = core.serialization.object({
    model: core.serialization.string(),
    messages: ChatMessages_1.ChatMessages,
    tools: core.serialization.list(Tool2_1.Tool2).optional(),
    toolChoice: core.serialization.property("tool_choice", V2ChatRequestToolChoice_1.V2ChatRequestToolChoice.optional()),
    citationMode: core.serialization.property("citation_mode", V2ChatRequestCitationMode_1.V2ChatRequestCitationMode.optional()),
    truncationMode: core.serialization.property("truncation_mode", V2ChatRequestTruncationMode_1.V2ChatRequestTruncationMode.optional()),
    responseFormat: core.serialization.property("response_format", V2ChatRequestResponseFormat_1.V2ChatRequestResponseFormat.optional()),
    maxTokens: core.serialization.property("max_tokens", core.serialization.number().optional()),
    stopSequences: core.serialization.property("stop_sequences", core.serialization.list(core.serialization.string()).optional()),
    maxInputTokens: core.serialization.property("max_input_tokens", core.serialization.number().optional()),
    temperature: core.serialization.number().optional(),
    seed: core.serialization.number().optional(),
    frequencyPenalty: core.serialization.property("frequency_penalty", core.serialization.number().optional()),
    presencePenalty: core.serialization.property("presence_penalty", core.serialization.number().optional()),
    k: core.serialization.number().optional(),
    p: core.serialization.number().optional(),
    returnPrompt: core.serialization.property("return_prompt", core.serialization.boolean().optional()),
});
